// Code generated by vfsgen; DO NOT EDIT.

package fixtures

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Fixtures statically implements the virtual filesystem provided to vfsgen.
var Fixtures = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2023, 6, 26, 7, 56, 27, 287059158, time.UTC),
		},
		"/download.yaml": &vfsgen۰CompressedFileInfo{
			name:             "download.yaml",
			modTime:          time.Date(2023, 6, 26, 7, 56, 27, 291059221, time.UTC),
			uncompressedSize: 10195,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd4\x5a\x5d\x6f\xdb\x38\xd6\xbe\xf7\xaf\x20\x7c\x93\x99\x17\x23\xb7\x99\xbe\x2d\x0a\x01\x73\xa1\xda\x6e\x6b\x6c\x62\x1b\xb6\x33\x33\x8b\xc5\x22\xa0\xc9\x63\x9b\x1b\x8a\xd4\x90\x94\x63\x6d\xd0\xff\xbe\x20\xf5\x2d\xcb\x4e\x9c\xa6\xde\xac\x2f\x1a\x89\x3c\x3c\xe7\xe1\xf9\xa6\x58\xcf\xf3\x3a\x38\x62\xbf\x83\xd2\x4c\x0a\x1f\x6d\x2f\x3b\x77\x4c\x50\x1f\x8d\x71\x08\x3a\xc2\x04\x3a\x21\x18\x4c\xb1\xc1\x7e\x07\x21\x8e\x97\xc0\xb5\x7d\x42\x88\x48\x61\x94\xe4\x5e\xc4\xb1\x00\x3f\x7f\xe5\xa0\xbc\x10\x0b\xbc\x06\xe5\xa8\x70\x14\xf5\xee\xe2\x25\x28\x01\x06\x74\x8f\xc9\x37\xe9\x2c\xf5\x96\x89\x8f\x22\xac\x30\x8f\x75\x07\x21\x81\x43\x28\xde\x3d\x9d\x68\x03\x61\xe7\x20\xba\x39\xa8\x2d\x23\x10\x10\x22\x63\x61\x6a\x10\x53\x46\x29\x03\x4f\xe3\x6c\xc4\x6d\x65\x8f\x7f\x7d\x43\x4f\x83\x6a\x31\x3d\x3c\x78\x88\xad\x10\x16\x14\xf5\xfa\x3c\xd6\x06\x54\xef\x3a\xc3\xd0\xbb\x72\x2c\xd1\x4f\xf0\x17\xfa\x89\x09\x0a\xbb\xc3\x34\xdd\x8c\x69\x8f\xc2\xf6\x4d\x29\x7a\xaa\xe4\x96\x51\x50\xdd\x9f\x51\x77\x32\x1d\x8e\xe7\x5f\x47\x9f\x17\xdd\x9f\xd1\xb7\x6f\x35\x6d\x68\x20\xb1\x62\x26\xe9\xc9\x08\x84\xde\xb0\x95\xb1\x98\x2b\x3a\x4a\xa7\xfb\x52\x18\xd8\x99\xbe\x14\xda\x28\xcc\x84\xd1\x2d\xfa\xca\x15\x13\x29\xb6\x65\x1c\xec\xa6\x35\x21\x1d\x84\xb0\x10\xd2\x60\xc3\xa4\xc8\xb4\xc4\x04\xe1\x31\x85\x9e\x02\x0e\x58\x43\x5d\x38\x5b\x86\x1e\xe1\x32\xa6\x99\x0f\x50\x1f\x75\x8d\x8a\xa1\xfb\xf8\x52\x0d\x7c\x95\xaf\xf2\x36\x6c\xbd\xf1\xf0\x16\x33\x8e\x97\x8c\x33\x93\x9c\xc0\x87\x89\x35\x07\x4f\x48\x0a\x1e\x85\x2d\x70\x19\x81\xaa\x2d\xaf\xdb\x98\x82\x26\x8a\x45\xc6\xa9\xf4\xa2\xdc\x3f\xc2\x9c\xcb\x7b\x8d\x30\x21\xa0\x35\x32\xd2\x0e\xa0\xea\xbc\xa0\x68\x23\xb5\x71\x3c\x11\x5a\x01\x36\xb1\x02\xed\xc6\xcd\x06\x50\x86\xdc\xae\x54\xb1\x40\xd8\xce\x24\x28\xd6\xa0\x7e\x71\x4f\x6b\x25\xe3\x28\x7d\x5c\xe9\x2f\xf9\x0b\x45\xf7\xcc\x6c\x32\x9e\x76\x6e\x3e\xbc\x62\x22\xde\xb9\xf8\x82\x9d\xe9\x21\xf4\x47\x30\x1b\x8f\xc6\x5f\x7c\x64\x36\x4c\x23\xa6\x9d\xb4\x50\x6a\x83\x14\x70\xbc\x03\x8a\xe6\xfd\xbe\x63\xa5\x37\x32\xe6\x14\x2d\xc1\x8a\xa5\x19\x53\x29\x78\x82\x56\x52\x21\x92\x7a\x25\xc2\x34\x64\x82\x59\xe7\xb0\x4a\xe8\xa1\x2f\x0a\x0b\xe3\x60\x20\x82\x63\x37\x76\xe1\xd6\xb6\xea\x9b\x28\xc0\x06\x3c\xcb\xb5\xa2\xe5\x6a\x5c\x29\x88\xbc\x7b\xa9\xee\xb8\xc4\xd6\x1f\xda\x5d\xad\x7b\x42\x08\x3a\xcb\x7c\x95\xda\x0c\x98\xfa\x5d\xf2\x38\x84\x29\x8f\xd7\x4c\xf8\xc8\x8a\x2f\xa7\x47\xd3\x7e\x73\x68\x0c\xc6\x42\x69\x0e\x4f\x47\x83\xbd\x21\xa9\x8c\xae\x0e\x4e\x73\xbc\x43\x4d\x30\xc7\xa9\xc3\xb4\x4c\x53\x1b\x70\x98\x09\xeb\x75\xe5\x34\xd0\x3e\x8e\x52\x97\x60\xa0\xfd\x8e\x87\x2e\xfe\xef\x22\x9f\xba\x11\x1a\xaf\x60\x9e\x68\x62\x78\x31\x47\x61\x85\x63\x6e\x02\x5a\x5f\x89\x44\xcc\x79\x27\xf3\x18\xab\x60\x93\x44\xe0\xa3\x59\x2c\x02\x1d\x88\xa4\xe3\xdc\xca\x31\x49\x93\x9c\x9f\x99\xd9\x73\x66\xd6\xe5\xb8\x8d\x90\xca\x6b\x88\x2d\x95\xee\x44\x8a\x49\xe5\x22\xce\x09\x52\x80\xe9\x44\xf0\x64\x26\xa5\xf9\xcc\x38\x64\xd4\x68\x85\xb9\x86\x8e\x82\xbf\x62\xa6\x80\x0e\x94\x8c\x5a\x50\x2a\x0b\xea\x46\x83\x6a\xc1\xa9\xc1\xf9\x75\x96\x9d\x5a\x09\x08\x91\x61\x34\x55\x72\x65\xe5\xe6\x6a\xd1\x71\x14\x71\x08\x41\x18\xcc\xbf\x64\x7b\xdd\x5b\x6b\xa3\xac\xaa\x03\x9d\xd6\x0b\x9c\xd6\x0b\xbf\x5e\x06\xfc\x4c\xd3\x4f\x25\x2f\x6b\xcb\x13\x17\x30\xb1\x56\xa0\xb5\x27\xd6\x4c\xec\x9e\xb5\xc8\x19\x4f\xdb\xb4\xff\xd4\xe5\x6b\x6c\xe0\x0e\x20\xca\x0d\xff\x8c\x75\x71\x44\x6d\x64\x17\xe5\xd3\x73\x41\xdd\xd9\xba\x88\x2b\xec\x91\xd7\x43\x10\xb4\x59\xa0\xd4\x12\x93\x1e\x8e\xcd\x46\x2a\xf6\xef\x34\xb9\xdc\x7d\xd4\xb5\x22\x95\x55\xc6\x99\xe4\x70\xb8\x2a\xf9\x65\x43\x71\x7a\xbd\x56\x71\xe6\x3c\x38\x62\xa5\xbf\xa4\xd8\x6d\x6e\xd2\x32\x56\x04\x6a\x83\x5b\x50\xcb\xca\x80\x87\x84\x14\xb3\x8c\xf0\x66\x76\x75\x9c\xb6\x21\x26\x8b\xbe\x5e\xa5\xd2\xef\x8b\x2d\x54\xac\xeb\x1c\xd3\xdc\xea\x1e\x29\x70\xc8\x1e\xd7\x60\xdc\x5f\xce\x74\xfa\x10\x61\x43\x36\xee\x29\x35\x99\x7b\xbc\x77\x83\xdf\x8b\xe7\x8d\x36\xd8\xc4\x0d\x58\x39\x80\x3d\xb9\xcf\x93\x66\xb0\xbe\xe3\x60\x5e\xc9\xde\x73\x34\xe7\xda\xf9\x2b\xda\xf6\xa9\x7b\x6e\x74\xe7\xa7\x85\xfb\x27\x26\x28\x13\xeb\x23\x51\xdf\xc8\x4c\x59\x12\xf0\x94\xe4\xb0\xcc\x16\x3f\x2b\x21\x48\x0e\x33\x58\xd9\x25\xb9\xa2\x8e\x60\xef\x20\xb4\x9f\xa9\x0e\xe5\x27\x1d\x2f\xff\x05\xc4\xb8\x74\xd3\x7a\x50\x39\xed\x78\xf2\x08\x93\xbc\x6c\x1d\x65\xf1\x5d\x36\x3a\x66\x1c\x25\x77\x89\xb3\xc5\x8b\x66\x65\x0b\x0d\x84\x61\xa4\x61\x83\xa6\xb7\xca\x3b\x10\x0a\xb6\x0c\xee\xdb\xe3\xa7\x95\x71\x8b\x6d\x1b\x7c\x33\x03\xa6\x3d\xff\x51\xfe\xe7\xf5\xfd\x52\xdb\xa5\xe7\xbf\xec\xb1\xf6\x07\x44\x45\xc5\x45\x5e\x7f\x60\x68\xb2\x01\x1a\x73\x26\xd6\x15\xc3\xd5\xce\x86\x0b\x7b\xda\xca\xbb\x63\x44\x38\xd6\xba\x71\xc0\x72\xa7\xaa\x4c\x0e\xca\xda\x2c\x14\x49\xaa\xdd\x99\xab\x97\xf9\xc1\x34\x63\xd1\xb7\x1c\x8e\x1c\xc5\xf3\xbe\x9d\x28\x66\xe3\x81\x3f\xcb\xac\x5b\xcc\x63\xf0\xd1\xe5\xdb\xfc\xf7\x1c\xcf\x7d\x24\x15\x70\xc0\x14\x94\x07\x1c\x88\x5d\x9e\x27\x85\x17\xf6\xcf\x03\x09\xa3\xdb\xdd\x8f\x62\x22\xc5\x8a\xad\x43\x1c\x1d\xa8\x64\x45\x15\xbd\x2f\x4a\x5a\xa5\xec\x56\x0a\x6a\x59\xf2\xb2\x5a\x7c\xa2\xf8\xa3\xf5\x74\x4f\xce\x93\x98\xc3\x16\x84\x79\xb1\x9c\xf4\xb4\x64\xd4\x66\xe0\x57\x96\x87\x5a\x13\x50\xab\x63\xbe\xfe\x54\x54\x56\x0c\xe7\x48\xd7\x38\x6a\xb3\x8d\x4b\xae\xa9\xab\xbd\xb8\x11\x72\x51\x1b\x63\xec\xf9\x7b\x97\xf8\xa8\xfb\xf0\xc0\x56\xe5\x97\xcc\x79\x04\xa4\xe7\xa6\x52\x90\xdf\xbe\x3d\x3c\xa0\x63\x04\xbd\xa1\xc0\x4b\x0e\xf6\x8c\x68\x4f\x8b\x87\xe9\xbe\xe6\x32\x91\x67\x49\x41\xd0\xe2\x4f\x37\x83\xa4\xff\x1b\x98\xf4\x11\x50\x42\x9e\x1b\xd1\x58\x1e\x81\xe3\x7c\x23\x88\xcd\xe6\x8c\x80\xa6\xb9\xcc\x76\x48\x4b\x29\x8d\x36\x0a\x47\xfd\xe0\x8c\xa0\x3e\x95\x52\xdb\x61\xb9\xef\x6f\x23\xe1\xbe\xa4\x43\x41\xfd\xa2\x08\xd1\x71\x88\x41\x2b\x82\x36\xb4\xcf\x4a\x13\x0a\x38\x4e\x3c\xbc\x06\x61\x7e\x74\xb2\xc8\xfa\x95\xd1\xc0\x47\x75\xed\x35\x6e\x3d\x52\xe5\x9d\x70\x31\x52\x30\xee\xa2\x42\x1d\xae\x30\x72\x9c\x68\x1f\x5d\x1c\x90\x16\x94\x37\x17\xa9\x9f\x1c\x92\x59\x21\xac\x0b\x4e\x25\x74\x2b\xc6\xb8\xd8\xb3\x02\x8e\x22\x5d\xd6\xd3\x01\x44\x5c\x26\x21\xb4\xde\x49\x55\x6c\xf1\xe2\x46\xd0\x11\x10\x4b\xaf\x5d\xb1\x93\x2a\x5d\x1b\xda\xbe\xe2\xaa\xc2\xcc\xb1\x6b\x22\x51\x10\x71\x46\xb0\xf6\xd1\x65\x9a\x3c\xdc\x87\xc7\x01\x60\xca\x99\x80\x39\x10\x29\xa8\x9d\xfc\xf8\xf6\x6d\x07\x21\x03\x61\xc4\xb1\x81\x4c\x42\x65\x97\xf6\xc7\x6b\xc2\x5a\xc5\x21\x94\x83\x75\x04\xab\x15\x13\xcc\x24\xe5\x12\x21\x29\x04\x7b\xa3\x16\x66\xf6\xad\x39\x56\x4c\xac\xe7\x45\xbf\x3e\x5a\x0b\x59\x0c\x0f\x77\x40\xdc\x95\x45\x75\x65\xca\x73\x9e\xa9\x66\x01\x2a\xd4\xf5\x69\xdb\x44\x39\x5d\x0d\x77\x91\xdd\x7b\x79\xdb\xd5\xa4\xba\x83\xc4\x6f\x5c\x20\x49\xdd\x42\x89\x90\x8c\x40\x61\x6b\x09\x34\x12\xad\x04\xae\x35\x6f\x15\x93\x8a\xe2\x4c\xc4\xbb\xa7\x82\xc0\x8a\x6c\x7e\x0c\x0c\x1c\xd2\x0f\xff\x7f\x78\x56\x85\xc5\xac\x01\x15\x32\xe1\x02\xe9\x8b\xc2\x04\xa6\xa0\x98\xa4\xa5\xff\xbc\xcd\xe8\xa2\xea\x01\x68\xfc\xd8\x99\xc7\x39\x4c\xad\xb9\x1a\xef\xb5\x67\xe9\xa5\x20\x33\xc5\xcd\x4b\xb1\x1f\x2f\x6f\xe6\xc0\x78\x9c\x85\xcc\x94\xc6\x62\x21\x5e\x83\x8f\xba\xcb\x58\x27\x4b\xb9\xf3\x2f\x7b\xef\xde\x75\x8b\x59\x22\xc3\x10\xdb\x90\xfe\x47\x57\x6f\xba\xbf\xa0\xae\x47\xec\xbf\xb1\x63\x82\x3c\x81\x3e\xbc\x7f\xff\xee\x43\xf7\x9f\xc5\x02\x5d\xbf\x6e\xad\x2a\xb4\xbc\xe9\xca\x6e\x84\x72\x11\x87\xd0\x36\x03\xa6\x0a\xf7\xe1\x01\xf5\x06\xf2\x5e\x70\x89\xe9\xc0\xa6\xaf\x99\x25\x0e\x2c\xed\xc8\x92\xa0\xb4\xb2\x65\xd1\xa5\xd6\xda\x6e\xc1\xf3\x42\x49\xe1\x37\xc2\x19\x08\xe3\x76\xe3\x71\xb9\xf6\x38\x6c\x81\xff\xf6\xae\xb2\x0b\x10\xdb\x12\x79\x0e\x67\x3a\x19\xdc\x8e\x83\xeb\x61\xa7\xe1\x35\x9f\x95\x0c\xeb\x8e\xb3\x62\xc0\x69\xd6\xbe\xef\x8d\x4f\xb1\xed\x48\xf2\x8c\xd1\xb3\xbc\x0f\x8a\x9a\x4f\x83\xfe\x0f\x90\x97\xfe\x8f\x86\xa6\xd0\xeb\xe0\xcf\xdb\xc1\x28\xb8\x9a\x3f\x2e\x90\xe4\xb5\xf6\x6f\x90\xb4\xc8\x3d\x52\x74\xab\x3f\x17\xc0\x21\xde\x0d\x18\xe6\xcd\xec\x21\xdd\xe7\x06\xcc\x6b\xae\x52\x62\xb5\x38\x27\x37\x8b\xdb\xe9\x6c\xf2\xe7\xdf\x5f\x08\x6f\xe3\x2c\xb1\x87\xb4\xec\xb9\xbf\x03\xeb\x6d\x70\xb3\xf8\x3a\x1c\x2f\x46\xfd\x60\x31\x9a\x8c\xcf\x04\xbd\x68\x85\x4f\x43\xfe\x75\xb1\x98\x9e\x5d\xc5\xcf\xd0\xb0\xc5\x39\xff\x9f\xf0\x85\xf1\xe4\xac\x30\xb3\x13\xd9\x69\x18\x3f\x4d\x26\x8b\xf9\x62\x16\x4c\x6f\xfb\xc1\x6d\x7f\x38\x5b\x9c\x09\x6c\xe5\x70\x74\x1a\xe0\xe0\xea\x6a\xf2\xc7\xed\x68\x3c\x1f\xf6\x6f\x66\xc3\xdb\x02\xff\x99\x70\xb7\x9f\x9e\x9e\xb6\x85\xf4\x16\xf9\xda\xd6\xf3\x5a\xf3\xe1\x3d\x2d\x87\x86\x76\x61\x9a\xe0\xdf\x80\x21\x6f\x1a\x24\xb5\x8f\x66\xd5\x06\x12\xb4\x69\xf4\x3a\x24\x8a\xdd\xf7\xd1\xb0\xce\x1f\x42\xa9\x12\x1f\x5d\xfe\xfa\xf1\x9a\x55\x66\xd2\x1e\xa2\x85\xc3\xfb\x43\x1c\xde\x5f\xfe\x7a\xcd\xdc\x48\xa7\xba\xf3\x63\x35\xbf\xb9\xe1\xc2\x58\x55\xb9\x07\x57\xfd\x27\x00\x00\xff\xff\xa2\xa1\x26\x2a\xd3\x27\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/download.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
