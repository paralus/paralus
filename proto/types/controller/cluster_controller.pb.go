// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/types/controller/cluster_controller.proto

package controller

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1beta1 "k8s.io/api/batch/v1beta1"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// +kubebuilder:object:generate=true
// StepObject can represent any kubernetes object
type StepObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta   *v1.TypeMeta   `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ObjectMeta *v1.ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Name       string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Raw        []byte         `protobuf:"bytes,4,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *StepObject) Reset() {
	*x = StepObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepObject) ProtoMessage() {}

func (x *StepObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepObject.ProtoReflect.Descriptor instead.
func (*StepObject) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{0}
}

func (x *StepObject) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *StepObject) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *StepObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StepObject) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

// +kubebuilder:object:generate=true
// StepTemplate is the description of a step
type StepTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OnFailed    string                   `protobuf:"bytes,2,opt,name=onFailed,proto3" json:"onFailed,omitempty"`
	Object      *StepObject              `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	JobTemplate *v1beta1.JobTemplateSpec `protobuf:"bytes,4,opt,name=jobTemplate,proto3" json:"jobTemplate,omitempty"`
}

func (x *StepTemplate) Reset() {
	*x = StepTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepTemplate) ProtoMessage() {}

func (x *StepTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepTemplate.ProtoReflect.Descriptor instead.
func (*StepTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{1}
}

func (x *StepTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StepTemplate) GetOnFailed() string {
	if x != nil {
		return x.OnFailed
	}
	return ""
}

func (x *StepTemplate) GetObject() *StepObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *StepTemplate) GetJobTemplate() *v1beta1.JobTemplateSpec {
	if x != nil {
		return x.JobTemplate
	}
	return nil
}

// +kubebuilder:object:generate=true
// StepStatus is the status of the step
type StepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ObjectRef      *v11.ObjectReference `protobuf:"bytes,2,opt,name=objectRef,proto3" json:"objectRef,omitempty"`
	ObjectState    string               `protobuf:"bytes,3,opt,name=objectState,proto3" json:"objectState,omitempty"`
	ObjectReason   string               `protobuf:"bytes,4,opt,name=objectReason,proto3" json:"objectReason,omitempty"`
	JobState       string               `protobuf:"bytes,5,opt,name=jobState,proto3" json:"jobState,omitempty"`
	JobReason      string               `protobuf:"bytes,6,opt,name=jobReason,proto3" json:"jobReason,omitempty"`
	JobRef         *v11.ObjectReference `protobuf:"bytes,7,opt,name=jobRef,proto3" json:"jobRef,omitempty"`
	State          string               `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Reason         string               `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	ObjectSpecHash string               `protobuf:"bytes,10,opt,name=objectSpecHash,proto3" json:"objectSpecHash,omitempty"`
	JobSpecHash    string               `protobuf:"bytes,11,opt,name=jobSpecHash,proto3" json:"jobSpecHash,omitempty"`
}

func (x *StepStatus) Reset() {
	*x = StepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepStatus) ProtoMessage() {}

func (x *StepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepStatus.ProtoReflect.Descriptor instead.
func (*StepStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{2}
}

func (x *StepStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StepStatus) GetObjectRef() *v11.ObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

func (x *StepStatus) GetObjectState() string {
	if x != nil {
		return x.ObjectState
	}
	return ""
}

func (x *StepStatus) GetObjectReason() string {
	if x != nil {
		return x.ObjectReason
	}
	return ""
}

func (x *StepStatus) GetJobState() string {
	if x != nil {
		return x.JobState
	}
	return ""
}

func (x *StepStatus) GetJobReason() string {
	if x != nil {
		return x.JobReason
	}
	return ""
}

func (x *StepStatus) GetJobRef() *v11.ObjectReference {
	if x != nil {
		return x.JobRef
	}
	return nil
}

func (x *StepStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StepStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StepStatus) GetObjectSpecHash() string {
	if x != nil {
		return x.ObjectSpecHash
	}
	return ""
}

func (x *StepStatus) GetJobSpecHash() string {
	if x != nil {
		return x.JobSpecHash
	}
	return ""
}

// +kubebuilder:object:generate=true
// TaskletSpec is the spec of the tasklet
type TaskletSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init        []*StepTemplate `protobuf:"bytes,1,rep,name=init,proto3" json:"init,omitempty"`
	Install     []*StepTemplate `protobuf:"bytes,2,rep,name=install,proto3" json:"install,omitempty"`
	PostInstall []*StepTemplate `protobuf:"bytes,3,rep,name=postInstall,proto3" json:"postInstall,omitempty"`
	PreDelete   []*StepTemplate `protobuf:"bytes,4,rep,name=preDelete,proto3" json:"preDelete,omitempty"`
}

func (x *TaskletSpec) Reset() {
	*x = TaskletSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskletSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskletSpec) ProtoMessage() {}

func (x *TaskletSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskletSpec.ProtoReflect.Descriptor instead.
func (*TaskletSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{3}
}

func (x *TaskletSpec) GetInit() []*StepTemplate {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *TaskletSpec) GetInstall() []*StepTemplate {
	if x != nil {
		return x.Install
	}
	return nil
}

func (x *TaskletSpec) GetPostInstall() []*StepTemplate {
	if x != nil {
		return x.PostInstall
	}
	return nil
}

func (x *TaskletSpec) GetPreDelete() []*StepTemplate {
	if x != nil {
		return x.PreDelete
	}
	return nil
}

// +kubebuilder:object:generate=true
// TaskletCondition is the condition of the tasklet
type TaskletCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status         string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdateTime *v1.Time `protobuf:"bytes,3,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	Reason         string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TaskletCondition) Reset() {
	*x = TaskletCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskletCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskletCondition) ProtoMessage() {}

func (x *TaskletCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskletCondition.ProtoReflect.Descriptor instead.
func (*TaskletCondition) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{4}
}

func (x *TaskletCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskletCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskletCondition) GetLastUpdateTime() *v1.Time {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *TaskletCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// +kubebuilder:object:generate=true
// TaskletStatus is the status of the tasklet
type TaskletStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration int64               `protobuf:"zigzag64,1,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	Conditions         []*TaskletCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Init               []*StepStatus       `protobuf:"bytes,3,rep,name=init,proto3" json:"init,omitempty"`
	Install            []*StepStatus       `protobuf:"bytes,4,rep,name=install,proto3" json:"install,omitempty"`
	PostInstall        []*StepStatus       `protobuf:"bytes,5,rep,name=postInstall,proto3" json:"postInstall,omitempty"`
	PreDelete          []*StepStatus       `protobuf:"bytes,6,rep,name=preDelete,proto3" json:"preDelete,omitempty"`
}

func (x *TaskletStatus) Reset() {
	*x = TaskletStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskletStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskletStatus) ProtoMessage() {}

func (x *TaskletStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskletStatus.ProtoReflect.Descriptor instead.
func (*TaskletStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{5}
}

func (x *TaskletStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TaskletStatus) GetConditions() []*TaskletCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *TaskletStatus) GetInit() []*StepStatus {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *TaskletStatus) GetInstall() []*StepStatus {
	if x != nil {
		return x.Install
	}
	return nil
}

func (x *TaskletStatus) GetPostInstall() []*StepStatus {
	if x != nil {
		return x.PostInstall
	}
	return nil
}

func (x *TaskletStatus) GetPreDelete() []*StepStatus {
	if x != nil {
		return x.PreDelete
	}
	return nil
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:shortName=rtl
// Tasklet is the schema of tasklet
type Tasklet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta   *v1.TypeMeta   `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ObjectMeta *v1.ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec       *TaskletSpec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *TaskletStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Tasklet) Reset() {
	*x = Tasklet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasklet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasklet) ProtoMessage() {}

func (x *Tasklet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasklet.ProtoReflect.Descriptor instead.
func (*Tasklet) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{6}
}

func (x *Tasklet) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *Tasklet) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *Tasklet) GetSpec() *TaskletSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Tasklet) GetStatus() *TaskletStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// +kubebuilder:object:root=true
// TaskletList contains a list of tasklets
type TaskletList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta *v1.TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ListMeta *v1.ListMeta `protobuf:"bytes,2,opt,name=listMeta,proto3" json:"listMeta,omitempty"`
	Items    []*Tasklet   `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TaskletList) Reset() {
	*x = TaskletList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskletList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskletList) ProtoMessage() {}

func (x *TaskletList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskletList.ProtoReflect.Descriptor instead.
func (*TaskletList) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{7}
}

func (x *TaskletList) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *TaskletList) GetListMeta() *v1.ListMeta {
	if x != nil {
		return x.ListMeta
	}
	return nil
}

func (x *TaskletList) GetItems() []*Tasklet {
	if x != nil {
		return x.Items
	}
	return nil
}

// +kubebuilder:object:generate=true
// TaskletTemplate is the template for creating a tasklet
type TaskletTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *v1.ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec       *TaskletSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TaskletTemplate) Reset() {
	*x = TaskletTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskletTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskletTemplate) ProtoMessage() {}

func (x *TaskletTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskletTemplate.ProtoReflect.Descriptor instead.
func (*TaskletTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{8}
}

func (x *TaskletTemplate) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *TaskletTemplate) GetSpec() *TaskletSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// +kubebuilder:object:generate=true
// TaskSpec is the spec of the task
type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init      []*StepTemplate  `protobuf:"bytes,1,rep,name=init,proto3" json:"init,omitempty"`
	Tasklet   *TaskletTemplate `protobuf:"bytes,2,opt,name=tasklet,proto3" json:"tasklet,omitempty"`
	PreDelete []*StepTemplate  `protobuf:"bytes,3,rep,name=preDelete,proto3" json:"preDelete,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{9}
}

func (x *TaskSpec) GetInit() []*StepTemplate {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *TaskSpec) GetTasklet() *TaskletTemplate {
	if x != nil {
		return x.Tasklet
	}
	return nil
}

func (x *TaskSpec) GetPreDelete() []*StepTemplate {
	if x != nil {
		return x.PreDelete
	}
	return nil
}

// +kubebuilder:object:generate=true
// TaskCondition is the condition of the tasklet
type TaskCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status         string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdateTime *v1.Time `protobuf:"bytes,3,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	Reason         string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TaskCondition) Reset() {
	*x = TaskCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCondition) ProtoMessage() {}

func (x *TaskCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCondition.ProtoReflect.Descriptor instead.
func (*TaskCondition) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{10}
}

func (x *TaskCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskCondition) GetLastUpdateTime() *v1.Time {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *TaskCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// +kubebuilder:object:generate=true
// TaskStatus is the status of the task
type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration int64                `protobuf:"zigzag64,1,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	Conditions         []*TaskCondition     `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Init               []*StepStatus        `protobuf:"bytes,3,rep,name=init,proto3" json:"init,omitempty"`
	TaskletRef         *v11.ObjectReference `protobuf:"bytes,4,opt,name=taskletRef,proto3" json:"taskletRef,omitempty"`
	PreDelete          []*StepStatus        `protobuf:"bytes,5,rep,name=preDelete,proto3" json:"preDelete,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{11}
}

func (x *TaskStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *TaskStatus) GetConditions() []*TaskCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *TaskStatus) GetInit() []*StepStatus {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *TaskStatus) GetTaskletRef() *v11.ObjectReference {
	if x != nil {
		return x.TaskletRef
	}
	return nil
}

func (x *TaskStatus) GetPreDelete() []*StepStatus {
	if x != nil {
		return x.PreDelete
	}
	return nil
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:shortName=rt
// Tasklet is the schema of task
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta   *v1.TypeMeta   `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ObjectMeta *v1.ObjectMeta `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec       *TaskSpec      `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *TaskStatus    `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{12}
}

func (x *Task) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *Task) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *Task) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Task) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// +kubebuilder:object:root=true
// TaskList contains a list of tasks
type TaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta *v1.TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ListMeta *v1.ListMeta `protobuf:"bytes,2,opt,name=listMeta,proto3" json:"listMeta,omitempty"`
	Items    []*Task      `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{13}
}

func (x *TaskList) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *TaskList) GetListMeta() *v1.ListMeta {
	if x != nil {
		return x.ListMeta
	}
	return nil
}

func (x *TaskList) GetItems() []*Task {
	if x != nil {
		return x.Items
	}
	return nil
}

// +kubebuilder:object:generate=true
// NamespaceSpec is the spec of the namespace
type NamespaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init          []*StepTemplate `protobuf:"bytes,1,rep,name=init,proto3" json:"init,omitempty"`
	NamespaceMeta *v1.ObjectMeta  `protobuf:"bytes,2,opt,name=namespaceMeta,proto3" json:"namespaceMeta,omitempty"`
	PostCreate    []*StepTemplate `protobuf:"bytes,3,rep,name=postCreate,proto3" json:"postCreate,omitempty"`
	PreDelete     []*StepTemplate `protobuf:"bytes,4,rep,name=preDelete,proto3" json:"preDelete,omitempty"`
}

func (x *NamespaceSpec) Reset() {
	*x = NamespaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSpec) ProtoMessage() {}

func (x *NamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSpec.ProtoReflect.Descriptor instead.
func (*NamespaceSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{14}
}

func (x *NamespaceSpec) GetInit() []*StepTemplate {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *NamespaceSpec) GetNamespaceMeta() *v1.ObjectMeta {
	if x != nil {
		return x.NamespaceMeta
	}
	return nil
}

func (x *NamespaceSpec) GetPostCreate() []*StepTemplate {
	if x != nil {
		return x.PostCreate
	}
	return nil
}

func (x *NamespaceSpec) GetPreDelete() []*StepTemplate {
	if x != nil {
		return x.PreDelete
	}
	return nil
}

// +kubebuilder:object:generate=true
type NamespaceCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status         string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdateTime *v1.Time `protobuf:"bytes,3,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	Reason         string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NamespaceCondition) Reset() {
	*x = NamespaceCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceCondition) ProtoMessage() {}

func (x *NamespaceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceCondition.ProtoReflect.Descriptor instead.
func (*NamespaceCondition) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{15}
}

func (x *NamespaceCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NamespaceCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NamespaceCondition) GetLastUpdateTime() *v1.Time {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *NamespaceCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// +kubebuilder:object:generate=true
// NamespaceStatus is the status of namespace
type NamespaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration int64                 `protobuf:"zigzag64,1,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	Conditions         []*NamespaceCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Init               []*StepStatus         `protobuf:"bytes,3,rep,name=init,proto3" json:"init,omitempty"`
	NamespaceRef       *v11.ObjectReference  `protobuf:"bytes,4,opt,name=namespaceRef,proto3" json:"namespaceRef,omitempty"`
	PostCreate         []*StepStatus         `protobuf:"bytes,5,rep,name=postCreate,proto3" json:"postCreate,omitempty"`
	PreDelete          []*StepStatus         `protobuf:"bytes,6,rep,name=preDelete,proto3" json:"preDelete,omitempty"`
}

func (x *NamespaceStatus) Reset() {
	*x = NamespaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceStatus) ProtoMessage() {}

func (x *NamespaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceStatus.ProtoReflect.Descriptor instead.
func (*NamespaceStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{16}
}

func (x *NamespaceStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *NamespaceStatus) GetConditions() []*NamespaceCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *NamespaceStatus) GetInit() []*StepStatus {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *NamespaceStatus) GetNamespaceRef() *v11.ObjectReference {
	if x != nil {
		return x.NamespaceRef
	}
	return nil
}

func (x *NamespaceStatus) GetPostCreate() []*StepStatus {
	if x != nil {
		return x.PostCreate
	}
	return nil
}

func (x *NamespaceStatus) GetPreDelete() []*StepStatus {
	if x != nil {
		return x.PreDelete
	}
	return nil
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:shortName=rns
// Namespace is the schema of namespace
type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta   *v1.TypeMeta     `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ObjectMeta *v1.ObjectMeta   `protobuf:"bytes,2,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec       *NamespaceSpec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *NamespaceStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{17}
}

func (x *Namespace) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *Namespace) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *Namespace) GetSpec() *NamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Namespace) GetStatus() *NamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// +kubebuilder:object:root=true
// TaskletList contains a list of tasklets
type NamespaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMeta *v1.TypeMeta `protobuf:"bytes,1,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
	ListMeta *v1.ListMeta `protobuf:"bytes,2,opt,name=listMeta,proto3" json:"listMeta,omitempty"`
	Items    []*Namespace `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NamespaceList) Reset() {
	*x = NamespaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceList) ProtoMessage() {}

func (x *NamespaceList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_controller_cluster_controller_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceList.ProtoReflect.Descriptor instead.
func (*NamespaceList) Descriptor() ([]byte, []int) {
	return file_proto_types_controller_cluster_controller_proto_rawDescGZIP(), []int{18}
}

func (x *NamespaceList) GetTypeMeta() *v1.TypeMeta {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

func (x *NamespaceList) GetListMeta() *v1.ListMeta {
	if x != nil {
		return x.ListMeta
	}
	return nil
}

func (x *NamespaceList) GetItems() []*Namespace {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_proto_types_controller_cluster_controller_proto protoreflect.FileDescriptor

var file_proto_types_controller_cluster_controller_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a,
	0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x50,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x65, 0x70, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x6a, 0x6f, 0x62,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x3e, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x12, 0x44, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x52, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa5, 0x03, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c,
	0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74,
	0x12, 0x4a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3d,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4a,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b,
	0x6c, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x6c,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xdd, 0x01, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x6c, 0x65,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x6c,
	0x65, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xa2, 0x02,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x50, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xbd, 0x02, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xac, 0x03, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04,
	0x69, 0x6e, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0xb1, 0x02, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x81, 0x02, 0x0a,
	0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x42, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xa2, 0x02,
	0x04, 0x50, 0x44, 0x54, 0x43, 0xaa, 0x02, 0x1c, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x1c, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44,
	0x65, 0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0xe2, 0x02, 0x28, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65,
	0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1f, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_controller_cluster_controller_proto_rawDescOnce sync.Once
	file_proto_types_controller_cluster_controller_proto_rawDescData = file_proto_types_controller_cluster_controller_proto_rawDesc
)

func file_proto_types_controller_cluster_controller_proto_rawDescGZIP() []byte {
	file_proto_types_controller_cluster_controller_proto_rawDescOnce.Do(func() {
		file_proto_types_controller_cluster_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_controller_cluster_controller_proto_rawDescData)
	})
	return file_proto_types_controller_cluster_controller_proto_rawDescData
}

var file_proto_types_controller_cluster_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_types_controller_cluster_controller_proto_goTypes = []interface{}{
	(*StepObject)(nil),              // 0: paralus.dev.types.controller.StepObject
	(*StepTemplate)(nil),            // 1: paralus.dev.types.controller.StepTemplate
	(*StepStatus)(nil),              // 2: paralus.dev.types.controller.StepStatus
	(*TaskletSpec)(nil),             // 3: paralus.dev.types.controller.TaskletSpec
	(*TaskletCondition)(nil),        // 4: paralus.dev.types.controller.TaskletCondition
	(*TaskletStatus)(nil),           // 5: paralus.dev.types.controller.TaskletStatus
	(*Tasklet)(nil),                 // 6: paralus.dev.types.controller.Tasklet
	(*TaskletList)(nil),             // 7: paralus.dev.types.controller.TaskletList
	(*TaskletTemplate)(nil),         // 8: paralus.dev.types.controller.TaskletTemplate
	(*TaskSpec)(nil),                // 9: paralus.dev.types.controller.TaskSpec
	(*TaskCondition)(nil),           // 10: paralus.dev.types.controller.TaskCondition
	(*TaskStatus)(nil),              // 11: paralus.dev.types.controller.TaskStatus
	(*Task)(nil),                    // 12: paralus.dev.types.controller.Task
	(*TaskList)(nil),                // 13: paralus.dev.types.controller.TaskList
	(*NamespaceSpec)(nil),           // 14: paralus.dev.types.controller.NamespaceSpec
	(*NamespaceCondition)(nil),      // 15: paralus.dev.types.controller.NamespaceCondition
	(*NamespaceStatus)(nil),         // 16: paralus.dev.types.controller.NamespaceStatus
	(*Namespace)(nil),               // 17: paralus.dev.types.controller.Namespace
	(*NamespaceList)(nil),           // 18: paralus.dev.types.controller.NamespaceList
	(*v1.TypeMeta)(nil),             // 19: k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	(*v1.ObjectMeta)(nil),           // 20: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v1beta1.JobTemplateSpec)(nil), // 21: k8s.io.api.batch.v1beta1.JobTemplateSpec
	(*v11.ObjectReference)(nil),     // 22: k8s.io.api.core.v1.ObjectReference
	(*v1.Time)(nil),                 // 23: k8s.io.apimachinery.pkg.apis.meta.v1.Time
	(*v1.ListMeta)(nil),             // 24: k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
}
var file_proto_types_controller_cluster_controller_proto_depIdxs = []int32{
	19, // 0: paralus.dev.types.controller.StepObject.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	20, // 1: paralus.dev.types.controller.StepObject.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	0,  // 2: paralus.dev.types.controller.StepTemplate.object:type_name -> paralus.dev.types.controller.StepObject
	21, // 3: paralus.dev.types.controller.StepTemplate.jobTemplate:type_name -> k8s.io.api.batch.v1beta1.JobTemplateSpec
	22, // 4: paralus.dev.types.controller.StepStatus.objectRef:type_name -> k8s.io.api.core.v1.ObjectReference
	22, // 5: paralus.dev.types.controller.StepStatus.jobRef:type_name -> k8s.io.api.core.v1.ObjectReference
	1,  // 6: paralus.dev.types.controller.TaskletSpec.init:type_name -> paralus.dev.types.controller.StepTemplate
	1,  // 7: paralus.dev.types.controller.TaskletSpec.install:type_name -> paralus.dev.types.controller.StepTemplate
	1,  // 8: paralus.dev.types.controller.TaskletSpec.postInstall:type_name -> paralus.dev.types.controller.StepTemplate
	1,  // 9: paralus.dev.types.controller.TaskletSpec.preDelete:type_name -> paralus.dev.types.controller.StepTemplate
	23, // 10: paralus.dev.types.controller.TaskletCondition.lastUpdateTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	4,  // 11: paralus.dev.types.controller.TaskletStatus.conditions:type_name -> paralus.dev.types.controller.TaskletCondition
	2,  // 12: paralus.dev.types.controller.TaskletStatus.init:type_name -> paralus.dev.types.controller.StepStatus
	2,  // 13: paralus.dev.types.controller.TaskletStatus.install:type_name -> paralus.dev.types.controller.StepStatus
	2,  // 14: paralus.dev.types.controller.TaskletStatus.postInstall:type_name -> paralus.dev.types.controller.StepStatus
	2,  // 15: paralus.dev.types.controller.TaskletStatus.preDelete:type_name -> paralus.dev.types.controller.StepStatus
	19, // 16: paralus.dev.types.controller.Tasklet.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	20, // 17: paralus.dev.types.controller.Tasklet.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	3,  // 18: paralus.dev.types.controller.Tasklet.spec:type_name -> paralus.dev.types.controller.TaskletSpec
	5,  // 19: paralus.dev.types.controller.Tasklet.status:type_name -> paralus.dev.types.controller.TaskletStatus
	19, // 20: paralus.dev.types.controller.TaskletList.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	24, // 21: paralus.dev.types.controller.TaskletList.listMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	6,  // 22: paralus.dev.types.controller.TaskletList.items:type_name -> paralus.dev.types.controller.Tasklet
	20, // 23: paralus.dev.types.controller.TaskletTemplate.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	3,  // 24: paralus.dev.types.controller.TaskletTemplate.spec:type_name -> paralus.dev.types.controller.TaskletSpec
	1,  // 25: paralus.dev.types.controller.TaskSpec.init:type_name -> paralus.dev.types.controller.StepTemplate
	8,  // 26: paralus.dev.types.controller.TaskSpec.tasklet:type_name -> paralus.dev.types.controller.TaskletTemplate
	1,  // 27: paralus.dev.types.controller.TaskSpec.preDelete:type_name -> paralus.dev.types.controller.StepTemplate
	23, // 28: paralus.dev.types.controller.TaskCondition.lastUpdateTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	10, // 29: paralus.dev.types.controller.TaskStatus.conditions:type_name -> paralus.dev.types.controller.TaskCondition
	2,  // 30: paralus.dev.types.controller.TaskStatus.init:type_name -> paralus.dev.types.controller.StepStatus
	22, // 31: paralus.dev.types.controller.TaskStatus.taskletRef:type_name -> k8s.io.api.core.v1.ObjectReference
	2,  // 32: paralus.dev.types.controller.TaskStatus.preDelete:type_name -> paralus.dev.types.controller.StepStatus
	19, // 33: paralus.dev.types.controller.Task.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	20, // 34: paralus.dev.types.controller.Task.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	9,  // 35: paralus.dev.types.controller.Task.spec:type_name -> paralus.dev.types.controller.TaskSpec
	11, // 36: paralus.dev.types.controller.Task.status:type_name -> paralus.dev.types.controller.TaskStatus
	19, // 37: paralus.dev.types.controller.TaskList.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	24, // 38: paralus.dev.types.controller.TaskList.listMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	12, // 39: paralus.dev.types.controller.TaskList.items:type_name -> paralus.dev.types.controller.Task
	1,  // 40: paralus.dev.types.controller.NamespaceSpec.init:type_name -> paralus.dev.types.controller.StepTemplate
	20, // 41: paralus.dev.types.controller.NamespaceSpec.namespaceMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	1,  // 42: paralus.dev.types.controller.NamespaceSpec.postCreate:type_name -> paralus.dev.types.controller.StepTemplate
	1,  // 43: paralus.dev.types.controller.NamespaceSpec.preDelete:type_name -> paralus.dev.types.controller.StepTemplate
	23, // 44: paralus.dev.types.controller.NamespaceCondition.lastUpdateTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	15, // 45: paralus.dev.types.controller.NamespaceStatus.conditions:type_name -> paralus.dev.types.controller.NamespaceCondition
	2,  // 46: paralus.dev.types.controller.NamespaceStatus.init:type_name -> paralus.dev.types.controller.StepStatus
	22, // 47: paralus.dev.types.controller.NamespaceStatus.namespaceRef:type_name -> k8s.io.api.core.v1.ObjectReference
	2,  // 48: paralus.dev.types.controller.NamespaceStatus.postCreate:type_name -> paralus.dev.types.controller.StepStatus
	2,  // 49: paralus.dev.types.controller.NamespaceStatus.preDelete:type_name -> paralus.dev.types.controller.StepStatus
	19, // 50: paralus.dev.types.controller.Namespace.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	20, // 51: paralus.dev.types.controller.Namespace.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	14, // 52: paralus.dev.types.controller.Namespace.spec:type_name -> paralus.dev.types.controller.NamespaceSpec
	16, // 53: paralus.dev.types.controller.Namespace.status:type_name -> paralus.dev.types.controller.NamespaceStatus
	19, // 54: paralus.dev.types.controller.NamespaceList.typeMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta
	24, // 55: paralus.dev.types.controller.NamespaceList.listMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	17, // 56: paralus.dev.types.controller.NamespaceList.items:type_name -> paralus.dev.types.controller.Namespace
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_proto_types_controller_cluster_controller_proto_init() }
func file_proto_types_controller_cluster_controller_proto_init() {
	if File_proto_types_controller_cluster_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_controller_cluster_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskletSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskletCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskletStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasklet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskletList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskletTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_controller_cluster_controller_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_controller_cluster_controller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_controller_cluster_controller_proto_goTypes,
		DependencyIndexes: file_proto_types_controller_cluster_controller_proto_depIdxs,
		MessageInfos:      file_proto_types_controller_cluster_controller_proto_msgTypes,
	}.Build()
	File_proto_types_controller_cluster_controller_proto = out.File
	file_proto_types_controller_cluster_controller_proto_rawDesc = nil
	file_proto_types_controller_cluster_controller_proto_goTypes = nil
	file_proto_types_controller_cluster_controller_proto_depIdxs = nil
}
