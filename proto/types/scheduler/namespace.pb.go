// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/types/scheduler/namespace.proto

package scheduler

import (
	v3 "github.com/paralus/paralus/proto/types/commonpb/v3"
	controller "github.com/paralus/paralus/proto/types/controller"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterNamespaceConditionType int32

const (
	ClusterNamespaceConditionType_ClusterNamespaceAssigned  ClusterNamespaceConditionType = 0
	ClusterNamespaceConditionType_ClusterNamespaceConverged ClusterNamespaceConditionType = 1
	ClusterNamespaceConditionType_ClusterNamespaceReady     ClusterNamespaceConditionType = 2
	ClusterNamespaceConditionType_ClusterNamespaceDelete    ClusterNamespaceConditionType = 3
)

// Enum value maps for ClusterNamespaceConditionType.
var (
	ClusterNamespaceConditionType_name = map[int32]string{
		0: "ClusterNamespaceAssigned",
		1: "ClusterNamespaceConverged",
		2: "ClusterNamespaceReady",
		3: "ClusterNamespaceDelete",
	}
	ClusterNamespaceConditionType_value = map[string]int32{
		"ClusterNamespaceAssigned":  0,
		"ClusterNamespaceConverged": 1,
		"ClusterNamespaceReady":     2,
		"ClusterNamespaceDelete":    3,
	}
)

func (x ClusterNamespaceConditionType) Enum() *ClusterNamespaceConditionType {
	p := new(ClusterNamespaceConditionType)
	*p = x
	return p
}

func (x ClusterNamespaceConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterNamespaceConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_scheduler_namespace_proto_enumTypes[0].Descriptor()
}

func (ClusterNamespaceConditionType) Type() protoreflect.EnumType {
	return &file_proto_types_scheduler_namespace_proto_enumTypes[0]
}

func (x ClusterNamespaceConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterNamespaceConditionType.Descriptor instead.
func (ClusterNamespaceConditionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{0}
}

type ClusterNamespaceType int32

const (
	ClusterNamespaceType_ClusterNamespaceSystem ClusterNamespaceType = 0
	ClusterNamespaceType_ClusterNamespaceCustom ClusterNamespaceType = 1
)

// Enum value maps for ClusterNamespaceType.
var (
	ClusterNamespaceType_name = map[int32]string{
		0: "ClusterNamespaceSystem",
		1: "ClusterNamespaceCustom",
	}
	ClusterNamespaceType_value = map[string]int32{
		"ClusterNamespaceSystem": 0,
		"ClusterNamespaceCustom": 1,
	}
)

func (x ClusterNamespaceType) Enum() *ClusterNamespaceType {
	p := new(ClusterNamespaceType)
	*p = x
	return p
}

func (x ClusterNamespaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterNamespaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_scheduler_namespace_proto_enumTypes[1].Descriptor()
}

func (ClusterNamespaceType) Type() protoreflect.EnumType {
	return &file_proto_types_scheduler_namespace_proto_enumTypes[1]
}

func (x ClusterNamespaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterNamespaceType.Descriptor instead.
func (ClusterNamespaceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{1}
}

type ClusterNamespaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ClusterNamespaceType `protobuf:"varint,1,opt,name=type,proto3,enum=paralus.dev.types.scheduler.ClusterNamespaceType" json:"type,omitempty"`
	Namespace *NamespaceTemplate   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterID string               `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ClusterNamespaceSpec) Reset() {
	*x = ClusterNamespaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNamespaceSpec) ProtoMessage() {}

func (x *ClusterNamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNamespaceSpec.ProtoReflect.Descriptor instead.
func (*ClusterNamespaceSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterNamespaceSpec) GetType() ClusterNamespaceType {
	if x != nil {
		return x.Type
	}
	return ClusterNamespaceType_ClusterNamespaceSystem
}

func (x *ClusterNamespaceSpec) GetNamespace() *NamespaceTemplate {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ClusterNamespaceSpec) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ClusterNamespaceCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ClusterNamespaceConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=paralus.dev.types.scheduler.ClusterNamespaceConditionType" json:"type,omitempty"`
	Status      v3.ParalusConditionStatus     `protobuf:"varint,2,opt,name=status,proto3,enum=paralus.dev.types.common.v3.ParalusConditionStatus" json:"status,omitempty"`
	LastUpdated *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	Reason      string                        `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ClusterNamespaceCondition) Reset() {
	*x = ClusterNamespaceCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNamespaceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNamespaceCondition) ProtoMessage() {}

func (x *ClusterNamespaceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNamespaceCondition.ProtoReflect.Descriptor instead.
func (*ClusterNamespaceCondition) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterNamespaceCondition) GetType() ClusterNamespaceConditionType {
	if x != nil {
		return x.Type
	}
	return ClusterNamespaceConditionType_ClusterNamespaceAssigned
}

func (x *ClusterNamespaceCondition) GetStatus() v3.ParalusConditionStatus {
	if x != nil {
		return x.Status
	}
	return v3.ParalusConditionStatus(0)
}

func (x *ClusterNamespaceCondition) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ClusterNamespaceCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ClusterNamespaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*ClusterNamespaceCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Status     *controller.NamespaceStatus  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClusterNamespaceStatus) Reset() {
	*x = ClusterNamespaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNamespaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNamespaceStatus) ProtoMessage() {}

func (x *ClusterNamespaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNamespaceStatus.ProtoReflect.Descriptor instead.
func (*ClusterNamespaceStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterNamespaceStatus) GetConditions() []*ClusterNamespaceCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ClusterNamespaceStatus) GetStatus() *controller.NamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClusterNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string                  `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string                  `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.Metadata            `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *ClusterNamespaceSpec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *ClusterNamespaceStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClusterNamespace) Reset() {
	*x = ClusterNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNamespace) ProtoMessage() {}

func (x *ClusterNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNamespace.ProtoReflect.Descriptor instead.
func (*ClusterNamespace) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterNamespace) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ClusterNamespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClusterNamespace) GetMetadata() *v3.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterNamespace) GetSpec() *ClusterNamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ClusterNamespace) GetStatus() *ClusterNamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClusterNamespaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string              `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string              `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.ListMetadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Items      []*ClusterNamespace `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ClusterNamespaceList) Reset() {
	*x = ClusterNamespaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNamespaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNamespaceList) ProtoMessage() {}

func (x *ClusterNamespaceList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNamespaceList.ProtoReflect.Descriptor instead.
func (*ClusterNamespaceList) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterNamespaceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ClusterNamespaceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClusterNamespaceList) GetMetadata() *v3.ListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterNamespaceList) GetItems() []*ClusterNamespace {
	if x != nil {
		return x.Items
	}
	return nil
}

// NamespaceTemplate is the template for creating namespace
type NamespaceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta        *v1.ObjectMeta            `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec              *controller.NamespaceSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	ResourceQuota     *ResourceQuota            `protobuf:"bytes,3,opt,name=resourceQuota,proto3" json:"resourceQuota,omitempty"`
	LimitRange        *LimitRange               `protobuf:"bytes,4,opt,name=limitRange,proto3" json:"limitRange,omitempty"`
	Type              string                    `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	NamespaceFromFile string                    `protobuf:"bytes,6,opt,name=namespaceFromFile,proto3" json:"namespaceFromFile,omitempty"`
	RepoRef           string                    `protobuf:"bytes,7,opt,name=repoRef,proto3" json:"repoRef,omitempty"`
	NamespaceFromRepo string                    `protobuf:"bytes,8,opt,name=namespaceFromRepo,proto3" json:"namespaceFromRepo,omitempty"`
}

func (x *NamespaceTemplate) Reset() {
	*x = NamespaceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceTemplate) ProtoMessage() {}

func (x *NamespaceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceTemplate.ProtoReflect.Descriptor instead.
func (*NamespaceTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{5}
}

func (x *NamespaceTemplate) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *NamespaceTemplate) GetSpec() *controller.NamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NamespaceTemplate) GetResourceQuota() *ResourceQuota {
	if x != nil {
		return x.ResourceQuota
	}
	return nil
}

func (x *NamespaceTemplate) GetLimitRange() *LimitRange {
	if x != nil {
		return x.LimitRange
	}
	return nil
}

func (x *NamespaceTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NamespaceTemplate) GetNamespaceFromFile() string {
	if x != nil {
		return x.NamespaceFromFile
	}
	return ""
}

func (x *NamespaceTemplate) GetRepoRef() string {
	if x != nil {
		return x.RepoRef
	}
	return ""
}

func (x *NamespaceTemplate) GetNamespaceFromRepo() string {
	if x != nil {
		return x.NamespaceFromRepo
	}
	return ""
}

type LimitRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodLimits       *LimitRangeItem `protobuf:"bytes,1,opt,name=podLimits,proto3" json:"podLimits,omitempty"`
	ContainerLimits *LimitRangeItem `protobuf:"bytes,2,opt,name=containerLimits,proto3" json:"containerLimits,omitempty"`
}

func (x *LimitRange) Reset() {
	*x = LimitRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRange) ProtoMessage() {}

func (x *LimitRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRange.ProtoReflect.Descriptor instead.
func (*LimitRange) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{6}
}

func (x *LimitRange) GetPodLimits() *LimitRangeItem {
	if x != nil {
		return x.PodLimits
	}
	return nil
}

func (x *LimitRange) GetContainerLimits() *LimitRangeItem {
	if x != nil {
		return x.ContainerLimits
	}
	return nil
}

type ResourceQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequests    float32 `protobuf:"fixed32,1,opt,name=cpuRequests,proto3" json:"cpuRequests,omitempty"`
	MemoryRequests float32 `protobuf:"fixed32,2,opt,name=memoryRequests,proto3" json:"memoryRequests,omitempty"`
	CpuLimits      float32 `protobuf:"fixed32,3,opt,name=cpuLimits,proto3" json:"cpuLimits,omitempty"`
	MemoryLimits   float32 `protobuf:"fixed32,4,opt,name=memoryLimits,proto3" json:"memoryLimits,omitempty"`
}

func (x *ResourceQuota) Reset() {
	*x = ResourceQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceQuota) ProtoMessage() {}

func (x *ResourceQuota) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceQuota.ProtoReflect.Descriptor instead.
func (*ResourceQuota) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceQuota) GetCpuRequests() float32 {
	if x != nil {
		return x.CpuRequests
	}
	return 0
}

func (x *ResourceQuota) GetMemoryRequests() float32 {
	if x != nil {
		return x.MemoryRequests
	}
	return 0
}

func (x *ResourceQuota) GetCpuLimits() float32 {
	if x != nil {
		return x.CpuLimits
	}
	return 0
}

func (x *ResourceQuota) GetMemoryLimits() float32 {
	if x != nil {
		return x.MemoryLimits
	}
	return 0
}

type LimitRangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCpu                     float32 `protobuf:"fixed32,1,opt,name=maxCpu,proto3" json:"maxCpu,omitempty"`
	MaxMemory                  float32 `protobuf:"fixed32,2,opt,name=maxMemory,proto3" json:"maxMemory,omitempty"`
	MinCpu                     float32 `protobuf:"fixed32,3,opt,name=minCpu,proto3" json:"minCpu,omitempty"`
	MinMemory                  float32 `protobuf:"fixed32,4,opt,name=minMemory,proto3" json:"minMemory,omitempty"`
	DefaultCpu                 float32 `protobuf:"fixed32,5,opt,name=defaultCpu,proto3" json:"defaultCpu,omitempty"`
	DefaultMemory              float32 `protobuf:"fixed32,6,opt,name=defaultMemory,proto3" json:"defaultMemory,omitempty"`
	DefaultRequestCpu          float32 `protobuf:"fixed32,7,opt,name=defaultRequestCpu,proto3" json:"defaultRequestCpu,omitempty"`
	DefaultRequestMemory       float32 `protobuf:"fixed32,8,opt,name=defaultRequestMemory,proto3" json:"defaultRequestMemory,omitempty"`
	MaxLimitRequestRatioCpu    float32 `protobuf:"fixed32,9,opt,name=maxLimitRequestRatioCpu,proto3" json:"maxLimitRequestRatioCpu,omitempty"`
	MaxLimitRequestRatioMemory float32 `protobuf:"fixed32,10,opt,name=maxLimitRequestRatioMemory,proto3" json:"maxLimitRequestRatioMemory,omitempty"`
}

func (x *LimitRangeItem) Reset() {
	*x = LimitRangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_scheduler_namespace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRangeItem) ProtoMessage() {}

func (x *LimitRangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_scheduler_namespace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRangeItem.ProtoReflect.Descriptor instead.
func (*LimitRangeItem) Descriptor() ([]byte, []int) {
	return file_proto_types_scheduler_namespace_proto_rawDescGZIP(), []int{8}
}

func (x *LimitRangeItem) GetMaxCpu() float32 {
	if x != nil {
		return x.MaxCpu
	}
	return 0
}

func (x *LimitRangeItem) GetMaxMemory() float32 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *LimitRangeItem) GetMinCpu() float32 {
	if x != nil {
		return x.MinCpu
	}
	return 0
}

func (x *LimitRangeItem) GetMinMemory() float32 {
	if x != nil {
		return x.MinMemory
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultCpu() float32 {
	if x != nil {
		return x.DefaultCpu
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultMemory() float32 {
	if x != nil {
		return x.DefaultMemory
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultRequestCpu() float32 {
	if x != nil {
		return x.DefaultRequestCpu
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultRequestMemory() float32 {
	if x != nil {
		return x.DefaultRequestMemory
	}
	return 0
}

func (x *LimitRangeItem) GetMaxLimitRequestRatioCpu() float32 {
	if x != nil {
		return x.MaxLimitRequestRatioCpu
	}
	return 0
}

func (x *LimitRangeItem) GetMaxLimitRequestRatioMemory() float32 {
	if x != nil {
		return x.MaxLimitRequestRatioMemory
	}
	return 0
}

var File_proto_types_scheduler_namespace_proto protoreflect.FileDescriptor

var file_proto_types_scheduler_namespace_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8e,
	0x02, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xb7, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xcb, 0x03, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x66, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x22, 0xae, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x49, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0x9e, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x43,
	0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x70, 0x75, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x70, 0x75, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x70,
	0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x70, 0x75,
	0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x2a, 0x93, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x10, 0x01, 0x42, 0xf3, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x0e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xa2, 0x02,
	0x04, 0x50, 0x44, 0x54, 0x53, 0xaa, 0x02, 0x1b, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0xca, 0x02, 0x1b, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65,
	0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0xe2, 0x02, 0x27, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65, 0x76, 0x5c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x3a, 0x3a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_scheduler_namespace_proto_rawDescOnce sync.Once
	file_proto_types_scheduler_namespace_proto_rawDescData = file_proto_types_scheduler_namespace_proto_rawDesc
)

func file_proto_types_scheduler_namespace_proto_rawDescGZIP() []byte {
	file_proto_types_scheduler_namespace_proto_rawDescOnce.Do(func() {
		file_proto_types_scheduler_namespace_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_scheduler_namespace_proto_rawDescData)
	})
	return file_proto_types_scheduler_namespace_proto_rawDescData
}

var file_proto_types_scheduler_namespace_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_types_scheduler_namespace_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_types_scheduler_namespace_proto_goTypes = []interface{}{
	(ClusterNamespaceConditionType)(0), // 0: paralus.dev.types.scheduler.ClusterNamespaceConditionType
	(ClusterNamespaceType)(0),          // 1: paralus.dev.types.scheduler.ClusterNamespaceType
	(*ClusterNamespaceSpec)(nil),       // 2: paralus.dev.types.scheduler.ClusterNamespaceSpec
	(*ClusterNamespaceCondition)(nil),  // 3: paralus.dev.types.scheduler.ClusterNamespaceCondition
	(*ClusterNamespaceStatus)(nil),     // 4: paralus.dev.types.scheduler.ClusterNamespaceStatus
	(*ClusterNamespace)(nil),           // 5: paralus.dev.types.scheduler.ClusterNamespace
	(*ClusterNamespaceList)(nil),       // 6: paralus.dev.types.scheduler.ClusterNamespaceList
	(*NamespaceTemplate)(nil),          // 7: paralus.dev.types.scheduler.NamespaceTemplate
	(*LimitRange)(nil),                 // 8: paralus.dev.types.scheduler.LimitRange
	(*ResourceQuota)(nil),              // 9: paralus.dev.types.scheduler.ResourceQuota
	(*LimitRangeItem)(nil),             // 10: paralus.dev.types.scheduler.LimitRangeItem
	(v3.ParalusConditionStatus)(0),     // 11: paralus.dev.types.common.v3.ParalusConditionStatus
	(*timestamppb.Timestamp)(nil),      // 12: google.protobuf.Timestamp
	(*controller.NamespaceStatus)(nil), // 13: paralus.dev.types.controller.NamespaceStatus
	(*v3.Metadata)(nil),                // 14: paralus.dev.types.common.v3.Metadata
	(*v3.ListMetadata)(nil),            // 15: paralus.dev.types.common.v3.ListMetadata
	(*v1.ObjectMeta)(nil),              // 16: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*controller.NamespaceSpec)(nil),   // 17: paralus.dev.types.controller.NamespaceSpec
}
var file_proto_types_scheduler_namespace_proto_depIdxs = []int32{
	1,  // 0: paralus.dev.types.scheduler.ClusterNamespaceSpec.type:type_name -> paralus.dev.types.scheduler.ClusterNamespaceType
	7,  // 1: paralus.dev.types.scheduler.ClusterNamespaceSpec.namespace:type_name -> paralus.dev.types.scheduler.NamespaceTemplate
	0,  // 2: paralus.dev.types.scheduler.ClusterNamespaceCondition.type:type_name -> paralus.dev.types.scheduler.ClusterNamespaceConditionType
	11, // 3: paralus.dev.types.scheduler.ClusterNamespaceCondition.status:type_name -> paralus.dev.types.common.v3.ParalusConditionStatus
	12, // 4: paralus.dev.types.scheduler.ClusterNamespaceCondition.lastUpdated:type_name -> google.protobuf.Timestamp
	3,  // 5: paralus.dev.types.scheduler.ClusterNamespaceStatus.conditions:type_name -> paralus.dev.types.scheduler.ClusterNamespaceCondition
	13, // 6: paralus.dev.types.scheduler.ClusterNamespaceStatus.status:type_name -> paralus.dev.types.controller.NamespaceStatus
	14, // 7: paralus.dev.types.scheduler.ClusterNamespace.metadata:type_name -> paralus.dev.types.common.v3.Metadata
	2,  // 8: paralus.dev.types.scheduler.ClusterNamespace.spec:type_name -> paralus.dev.types.scheduler.ClusterNamespaceSpec
	4,  // 9: paralus.dev.types.scheduler.ClusterNamespace.status:type_name -> paralus.dev.types.scheduler.ClusterNamespaceStatus
	15, // 10: paralus.dev.types.scheduler.ClusterNamespaceList.metadata:type_name -> paralus.dev.types.common.v3.ListMetadata
	5,  // 11: paralus.dev.types.scheduler.ClusterNamespaceList.items:type_name -> paralus.dev.types.scheduler.ClusterNamespace
	16, // 12: paralus.dev.types.scheduler.NamespaceTemplate.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	17, // 13: paralus.dev.types.scheduler.NamespaceTemplate.spec:type_name -> paralus.dev.types.controller.NamespaceSpec
	9,  // 14: paralus.dev.types.scheduler.NamespaceTemplate.resourceQuota:type_name -> paralus.dev.types.scheduler.ResourceQuota
	8,  // 15: paralus.dev.types.scheduler.NamespaceTemplate.limitRange:type_name -> paralus.dev.types.scheduler.LimitRange
	10, // 16: paralus.dev.types.scheduler.LimitRange.podLimits:type_name -> paralus.dev.types.scheduler.LimitRangeItem
	10, // 17: paralus.dev.types.scheduler.LimitRange.containerLimits:type_name -> paralus.dev.types.scheduler.LimitRangeItem
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_types_scheduler_namespace_proto_init() }
func file_proto_types_scheduler_namespace_proto_init() {
	if File_proto_types_scheduler_namespace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_scheduler_namespace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNamespaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNamespaceCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNamespaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNamespaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_scheduler_namespace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_scheduler_namespace_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_scheduler_namespace_proto_goTypes,
		DependencyIndexes: file_proto_types_scheduler_namespace_proto_depIdxs,
		EnumInfos:         file_proto_types_scheduler_namespace_proto_enumTypes,
		MessageInfos:      file_proto_types_scheduler_namespace_proto_msgTypes,
	}.Build()
	File_proto_types_scheduler_namespace_proto = out.File
	file_proto_types_scheduler_namespace_proto_rawDesc = nil
	file_proto_types_scheduler_namespace_proto_goTypes = nil
	file_proto_types_scheduler_namespace_proto_depIdxs = nil
}
