// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/types/commonpb/v3/artifacts.proto

package commonv3

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{0}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadedYAMLArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*File `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *UploadedYAMLArtifact) Reset() {
	*x = UploadedYAMLArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedYAMLArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedYAMLArtifact) ProtoMessage() {}

func (x *UploadedYAMLArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedYAMLArtifact.ProtoReflect.Descriptor instead.
func (*UploadedYAMLArtifact) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{1}
}

func (x *UploadedYAMLArtifact) GetPaths() []*File {
	if x != nil {
		return x.Paths
	}
	return nil
}

type UploadedHelmArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartPath   *File   `protobuf:"bytes,1,opt,name=chartPath,proto3" json:"chartPath,omitempty"`
	ValuesPaths []*File `protobuf:"bytes,2,rep,name=valuesPaths,proto3" json:"valuesPaths,omitempty"`
}

func (x *UploadedHelmArtifact) Reset() {
	*x = UploadedHelmArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedHelmArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedHelmArtifact) ProtoMessage() {}

func (x *UploadedHelmArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedHelmArtifact.ProtoReflect.Descriptor instead.
func (*UploadedHelmArtifact) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{2}
}

func (x *UploadedHelmArtifact) GetChartPath() *File {
	if x != nil {
		return x.ChartPath
	}
	return nil
}

func (x *UploadedHelmArtifact) GetValuesPaths() []*File {
	if x != nil {
		return x.ValuesPaths
	}
	return nil
}

type YAMLInGitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   string  `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Paths      []*File `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *YAMLInGitRepo) Reset() {
	*x = YAMLInGitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YAMLInGitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YAMLInGitRepo) ProtoMessage() {}

func (x *YAMLInGitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YAMLInGitRepo.ProtoReflect.Descriptor instead.
func (*YAMLInGitRepo) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{3}
}

func (x *YAMLInGitRepo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *YAMLInGitRepo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *YAMLInGitRepo) GetPaths() []*File {
	if x != nil {
		return x.Paths
	}
	return nil
}

type HelmInGitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository  string  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision    string  `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	ChartPath   *File   `protobuf:"bytes,3,opt,name=chartPath,proto3" json:"chartPath,omitempty"`
	ValuesPaths []*File `protobuf:"bytes,4,rep,name=valuesPaths,proto3" json:"valuesPaths,omitempty"`
}

func (x *HelmInGitRepo) Reset() {
	*x = HelmInGitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmInGitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmInGitRepo) ProtoMessage() {}

func (x *HelmInGitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmInGitRepo.ProtoReflect.Descriptor instead.
func (*HelmInGitRepo) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{4}
}

func (x *HelmInGitRepo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *HelmInGitRepo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *HelmInGitRepo) GetChartPath() *File {
	if x != nil {
		return x.ChartPath
	}
	return nil
}

func (x *HelmInGitRepo) GetValuesPaths() []*File {
	if x != nil {
		return x.ValuesPaths
	}
	return nil
}

type HelmInHelmRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository   string  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	ChartName    string  `protobuf:"bytes,2,opt,name=chartName,proto3" json:"chartName,omitempty"`
	ChartVersion string  `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	ValuesPaths  []*File `protobuf:"bytes,4,rep,name=valuesPaths,proto3" json:"valuesPaths,omitempty"`
}

func (x *HelmInHelmRepo) Reset() {
	*x = HelmInHelmRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmInHelmRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmInHelmRepo) ProtoMessage() {}

func (x *HelmInHelmRepo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmInHelmRepo.ProtoReflect.Descriptor instead.
func (*HelmInHelmRepo) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{5}
}

func (x *HelmInHelmRepo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *HelmInHelmRepo) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *HelmInHelmRepo) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *HelmInHelmRepo) GetValuesPaths() []*File {
	if x != nil {
		return x.ValuesPaths
	}
	return nil
}

type ManagedAlertManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configmap     *File `protobuf:"bytes,1,opt,name=configmap,proto3" json:"configmap,omitempty"`
	Secret        *File `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Configuration *File `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Statefulset   *File `protobuf:"bytes,4,opt,name=statefulset,proto3" json:"statefulset,omitempty"`
}

func (x *ManagedAlertManager) Reset() {
	*x = ManagedAlertManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedAlertManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedAlertManager) ProtoMessage() {}

func (x *ManagedAlertManager) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedAlertManager.ProtoReflect.Descriptor instead.
func (*ManagedAlertManager) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{6}
}

func (x *ManagedAlertManager) GetConfigmap() *File {
	if x != nil {
		return x.Configmap
	}
	return nil
}

func (x *ManagedAlertManager) GetSecret() *File {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *ManagedAlertManager) GetConfiguration() *File {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *ManagedAlertManager) GetStatefulset() *File {
	if x != nil {
		return x.Statefulset
	}
	return nil
}

type ArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Artifact:
	//
	//	*ArtifactSpec_UploadedYAML
	//	*ArtifactSpec_UploadedHelm
	//	*ArtifactSpec_YamlInGitRepo
	//	*ArtifactSpec_HelmInGitRepo
	//	*ArtifactSpec_HelmInHelmRepo
	//	*ArtifactSpec_ManagedAlertManger
	Artifact isArtifactSpec_Artifact `protobuf_oneof:"artifact"`
	// Types that are assignable to Options:
	//
	//	*ArtifactSpec_HelmOptions
	//	*ArtifactSpec_YamlOptions
	Options isArtifactSpec_Options `protobuf_oneof:"options"`
}

func (x *ArtifactSpec) Reset() {
	*x = ArtifactSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSpec) ProtoMessage() {}

func (x *ArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSpec.ProtoReflect.Descriptor instead.
func (*ArtifactSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{7}
}

func (x *ArtifactSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *ArtifactSpec) GetArtifact() isArtifactSpec_Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func (x *ArtifactSpec) GetUploadedYAML() *UploadedYAMLArtifact {
	if x, ok := x.GetArtifact().(*ArtifactSpec_UploadedYAML); ok {
		return x.UploadedYAML
	}
	return nil
}

func (x *ArtifactSpec) GetUploadedHelm() *UploadedHelmArtifact {
	if x, ok := x.GetArtifact().(*ArtifactSpec_UploadedHelm); ok {
		return x.UploadedHelm
	}
	return nil
}

func (x *ArtifactSpec) GetYamlInGitRepo() *YAMLInGitRepo {
	if x, ok := x.GetArtifact().(*ArtifactSpec_YamlInGitRepo); ok {
		return x.YamlInGitRepo
	}
	return nil
}

func (x *ArtifactSpec) GetHelmInGitRepo() *HelmInGitRepo {
	if x, ok := x.GetArtifact().(*ArtifactSpec_HelmInGitRepo); ok {
		return x.HelmInGitRepo
	}
	return nil
}

func (x *ArtifactSpec) GetHelmInHelmRepo() *HelmInHelmRepo {
	if x, ok := x.GetArtifact().(*ArtifactSpec_HelmInHelmRepo); ok {
		return x.HelmInHelmRepo
	}
	return nil
}

func (x *ArtifactSpec) GetManagedAlertManger() *ManagedAlertManager {
	if x, ok := x.GetArtifact().(*ArtifactSpec_ManagedAlertManger); ok {
		return x.ManagedAlertManger
	}
	return nil
}

func (m *ArtifactSpec) GetOptions() isArtifactSpec_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *ArtifactSpec) GetHelmOptions() *HelmOptions {
	if x, ok := x.GetOptions().(*ArtifactSpec_HelmOptions); ok {
		return x.HelmOptions
	}
	return nil
}

func (x *ArtifactSpec) GetYamlOptions() *YAMLOptions {
	if x, ok := x.GetOptions().(*ArtifactSpec_YamlOptions); ok {
		return x.YamlOptions
	}
	return nil
}

type isArtifactSpec_Artifact interface {
	isArtifactSpec_Artifact()
}

type ArtifactSpec_UploadedYAML struct {
	UploadedYAML *UploadedYAMLArtifact `protobuf:"bytes,10,opt,name=uploadedYAML,proto3,oneof"`
}

type ArtifactSpec_UploadedHelm struct {
	UploadedHelm *UploadedHelmArtifact `protobuf:"bytes,11,opt,name=uploadedHelm,proto3,oneof"`
}

type ArtifactSpec_YamlInGitRepo struct {
	YamlInGitRepo *YAMLInGitRepo `protobuf:"bytes,12,opt,name=yamlInGitRepo,proto3,oneof"`
}

type ArtifactSpec_HelmInGitRepo struct {
	HelmInGitRepo *HelmInGitRepo `protobuf:"bytes,13,opt,name=helmInGitRepo,proto3,oneof"`
}

type ArtifactSpec_HelmInHelmRepo struct {
	HelmInHelmRepo *HelmInHelmRepo `protobuf:"bytes,14,opt,name=helmInHelmRepo,proto3,oneof"`
}

type ArtifactSpec_ManagedAlertManger struct {
	ManagedAlertManger *ManagedAlertManager `protobuf:"bytes,15,opt,name=managedAlertManger,proto3,oneof"`
}

func (*ArtifactSpec_UploadedYAML) isArtifactSpec_Artifact() {}

func (*ArtifactSpec_UploadedHelm) isArtifactSpec_Artifact() {}

func (*ArtifactSpec_YamlInGitRepo) isArtifactSpec_Artifact() {}

func (*ArtifactSpec_HelmInGitRepo) isArtifactSpec_Artifact() {}

func (*ArtifactSpec_HelmInHelmRepo) isArtifactSpec_Artifact() {}

func (*ArtifactSpec_ManagedAlertManger) isArtifactSpec_Artifact() {}

type isArtifactSpec_Options interface {
	isArtifactSpec_Options()
}

type ArtifactSpec_HelmOptions struct {
	HelmOptions *HelmOptions `protobuf:"bytes,30,opt,name=helmOptions,proto3,oneof"`
}

type ArtifactSpec_YamlOptions struct {
	YamlOptions *YAMLOptions `protobuf:"bytes,31,opt,name=yamlOptions,proto3,oneof"`
}

func (*ArtifactSpec_HelmOptions) isArtifactSpec_Options() {}

func (*ArtifactSpec_YamlOptions) isArtifactSpec_Options() {}

// $title: Helm Options
// $description: options for deploying Helm artifacts
type HelmOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atomic                   bool     `protobuf:"varint,1,opt,name=atomic,proto3" json:"atomic,omitempty"`
	Wait                     bool     `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
	Force                    bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	NoHooks                  bool     `protobuf:"varint,4,opt,name=noHooks,proto3" json:"noHooks,omitempty"`
	MaxHistory               int32    `protobuf:"zigzag32,5,opt,name=maxHistory,proto3" json:"maxHistory,omitempty"`
	RenderSubChartNotes      bool     `protobuf:"varint,6,opt,name=renderSubChartNotes,proto3" json:"renderSubChartNotes,omitempty"`
	ResetValues              bool     `protobuf:"varint,7,opt,name=resetValues,proto3" json:"resetValues,omitempty"`
	ReuseValues              bool     `protobuf:"varint,8,opt,name=reuseValues,proto3" json:"reuseValues,omitempty"`
	SetString                []string `protobuf:"bytes,9,rep,name=setString,proto3" json:"setString,omitempty"`
	SkipCRDs                 bool     `protobuf:"varint,10,opt,name=skipCRDs,proto3" json:"skipCRDs,omitempty"`
	Timeout                  string   `protobuf:"bytes,11,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CleanUpOnFail            bool     `protobuf:"varint,12,opt,name=cleanUpOnFail,proto3" json:"cleanUpOnFail,omitempty"`
	Description              string   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	DisableOpenAPIValidation bool     `protobuf:"varint,14,opt,name=disableOpenAPIValidation,proto3" json:"disableOpenAPIValidation,omitempty"`
	KeepHistory              bool     `protobuf:"varint,15,opt,name=keepHistory,proto3" json:"keepHistory,omitempty"`
}

func (x *HelmOptions) Reset() {
	*x = HelmOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmOptions) ProtoMessage() {}

func (x *HelmOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmOptions.ProtoReflect.Descriptor instead.
func (*HelmOptions) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{8}
}

func (x *HelmOptions) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

func (x *HelmOptions) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *HelmOptions) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *HelmOptions) GetNoHooks() bool {
	if x != nil {
		return x.NoHooks
	}
	return false
}

func (x *HelmOptions) GetMaxHistory() int32 {
	if x != nil {
		return x.MaxHistory
	}
	return 0
}

func (x *HelmOptions) GetRenderSubChartNotes() bool {
	if x != nil {
		return x.RenderSubChartNotes
	}
	return false
}

func (x *HelmOptions) GetResetValues() bool {
	if x != nil {
		return x.ResetValues
	}
	return false
}

func (x *HelmOptions) GetReuseValues() bool {
	if x != nil {
		return x.ReuseValues
	}
	return false
}

func (x *HelmOptions) GetSetString() []string {
	if x != nil {
		return x.SetString
	}
	return nil
}

func (x *HelmOptions) GetSkipCRDs() bool {
	if x != nil {
		return x.SkipCRDs
	}
	return false
}

func (x *HelmOptions) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *HelmOptions) GetCleanUpOnFail() bool {
	if x != nil {
		return x.CleanUpOnFail
	}
	return false
}

func (x *HelmOptions) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HelmOptions) GetDisableOpenAPIValidation() bool {
	if x != nil {
		return x.DisableOpenAPIValidation
	}
	return false
}

func (x *HelmOptions) GetKeepHistory() bool {
	if x != nil {
		return x.KeepHistory
	}
	return false
}

type YAMLOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force                    bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	DisableOpenAPIValidation bool `protobuf:"varint,2,opt,name=disableOpenAPIValidation,proto3" json:"disableOpenAPIValidation,omitempty"`
}

func (x *YAMLOptions) Reset() {
	*x = YAMLOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YAMLOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YAMLOptions) ProtoMessage() {}

func (x *YAMLOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_commonpb_v3_artifacts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YAMLOptions.ProtoReflect.Descriptor instead.
func (*YAMLOptions) Descriptor() ([]byte, []int) {
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP(), []int{9}
}

func (x *YAMLOptions) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *YAMLOptions) GetDisableOpenAPIValidation() bool {
	if x != nil {
		return x.DisableOpenAPIValidation
	}
	return false
}

var File_proto_types_commonpb_v3_artifacts_proto protoreflect.FileDescriptor

var file_proto_types_commonpb_v3_artifacts_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x94, 0x01, 0x92, 0x41,
	0x90, 0x01, 0x0a, 0x5b, 0x2a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x4c, 0x66, 0x69, 0x6c, 0x65,
	0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x28, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x29, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x69, 0x6c, 0x65,
	0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x31, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x6f, 0x6d, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a,
	0x20, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x7d, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x59,
	0x41, 0x4d, 0x4c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x7a, 0x0a, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x41, 0x92,
	0x41, 0x3e, 0x2a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0x35, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x59, 0x41, 0x4d, 0x4c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x3a, 0x88, 0x01, 0x92, 0x41, 0x84, 0x01, 0x0a, 0x41,
	0x2a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x59, 0x41, 0x4d, 0x4c, 0x20,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x32, 0x1f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x59,
	0x41, 0x4d, 0x4c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0xd2, 0x01, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x32, 0x3f, 0x7b, 0x22, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x2f, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f,
	0x73, 0x6f, 0x6d, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7d,
	0x5d, 0x7d, 0x22, 0xc8, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x48,
	0x65, 0x6c, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x7d, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x32, 0x2c, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20,
	0x48, 0x65, 0x6c, 0x6d, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20, 0x62, 0x79, 0x20, 0x69, 0x74,
	0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0x2f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x3a, 0xa7, 0x01, 0x92, 0x41, 0xa3, 0x01, 0x0a, 0x5c, 0x2a, 0x16, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x32, 0x36, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0xd2, 0x01, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x32, 0x43, 0x7b, 0x22, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x2f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x74, 0x67, 0x7a, 0x22, 0x7d, 0x5d, 0x7d, 0x22, 0xf1, 0x03,
	0x0a, 0x0d, 0x59, 0x41, 0x4d, 0x4c, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x4b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x32, 0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x2a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x23, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x61, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x38,
	0x92, 0x41, 0x35, 0x2a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0x2c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x74, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x3a,
	0xcf, 0x01, 0x92, 0x41, 0xcb, 0x01, 0x0a, 0x60, 0x2a, 0x19, 0x59, 0x41, 0x4d, 0x4c, 0x20, 0x49,
	0x6e, 0x20, 0x47, 0x69, 0x74, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x20, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x32, 0x23, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x59, 0x41, 0x4d, 0x4c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x47, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0xd2, 0x01, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0xd2, 0x01, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x32, 0x67, 0x7b, 0x22, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x72,
	0x65, 0x70, 0x6f, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
	0x20, 0x22, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f, 0x73,
	0x6f, 0x6d, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7d, 0x5d,
	0x7d, 0x22, 0x96, 0x05, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x23, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x61, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x83, 0x01, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x0a, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x20, 0x50, 0x61, 0x74, 0x68, 0x32, 0x31, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x74,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42,
	0x44, 0x92, 0x41, 0x41, 0x2a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x32, 0x32, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x3a, 0xd5, 0x01, 0x92, 0x41, 0xd1, 0x01, 0x0a, 0x64, 0x2a, 0x19, 0x48, 0x65, 0x6c,
	0x6d, 0x20, 0x69, 0x6e, 0x20, 0x47, 0x69, 0x74, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x20, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x32, 0x23, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x61, 0x20, 0x47, 0x69, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0xd2, 0x01, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xd2, 0x01, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x32,
	0x69, 0x7b, 0x22, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x20,
	0x22, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x22,
	0x2c, 0x22, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x20, 0x7b, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x2e, 0x74, 0x67, 0x7a, 0x22, 0x7d, 0x7d, 0x22, 0x9f, 0x04, 0x0a, 0x0e, 0x48,
	0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x4c, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x32, 0x1b, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x68, 0x65, 0x6c, 0x6d, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x11, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x14, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x20, 0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0x1e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x3a, 0xb6, 0x01, 0x92, 0x41, 0xb2, 0x01, 0x0a, 0x61, 0x2a, 0x11, 0x48, 0x65,
	0x6c, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x32,
	0x24, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x48, 0x65, 0x6c, 0x6d,
	0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x48, 0x65, 0x6c, 0x6d,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0xd2, 0x01, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x4d, 0x7b,
	0x22, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x73,
	0x6f, 0x6d, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x22, 0x7d, 0x22, 0x8c, 0x07, 0x0a,
	0x13, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x3f, 0x92, 0x41, 0x3c,
	0x2a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x73, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x2b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x88, 0x01, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x06, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x32, 0x32, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x30, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x3a, 0xec, 0x02, 0x92,
	0x41, 0xe8, 0x02, 0x0a, 0x6c, 0x2a, 0x15, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x32, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xd2, 0x01,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0xd2, 0x01, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0xd2, 0x01, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65,
	0x74, 0x32, 0xf7, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x22,
	0x3a, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x69, 0x6c, 0x65,
	0x3a, 0x2f, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7d,
	0x2c, 0x22, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x2f, 0x2f, 0x70, 0x61, 0x74, 0x68,
	0x2f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e,
	0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x2f, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f,
	0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7d, 0x2c, 0x22, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x2f, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f,
	0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x73, 0x65, 0x74, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7d, 0x7d, 0x22, 0xf1, 0x07, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x59, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a,
	0x0d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x20, 0x54, 0x79, 0x70, 0x65, 0x32, 0x14,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0xf2, 0x02, 0x04, 0x48, 0x65, 0x6c, 0x6d, 0xf2, 0x02, 0x04, 0x59, 0x61,
	0x6d, 0x6c, 0xf2, 0x02, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x59, 0x41, 0x4d, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x59, 0x41, 0x4d, 0x4c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x59, 0x41, 0x4d, 0x4c,
	0x12, 0x57, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x48, 0x65, 0x6c,
	0x6d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x6d, 0x12, 0x52, 0x0a, 0x0d, 0x79, 0x61, 0x6d,
	0x6c, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x59,
	0x41, 0x4d, 0x4c, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x48, 0x00, 0x52, 0x0d,
	0x79, 0x61, 0x6d, 0x6c, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x52, 0x0a,
	0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x48, 0x00, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x55, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x48, 0x65, 0x6c, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x48, 0x65,
	0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x6d, 0x49, 0x6e,
	0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x62, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b,
	0x68, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e,
	0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x68,
	0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x79, 0x61,
	0x6d, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x59, 0x41,
	0x4d, 0x4c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x79, 0x61, 0x6d,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0xbd, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x0a,
	0x2e, 0x2a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x32,
	0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0xd2, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x32,
	0x86, 0x01, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x48, 0x65, 0x6c, 0x6d,
	0x22, 0x2c, 0x22, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x3a, 0x20, 0x7b, 0x22,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x6f,
	0x6d, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x61,
	0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6d, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x2e, 0x74, 0x67, 0x7a, 0x22, 0x7d, 0x7d, 0x7d, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xd0, 0x0b, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4a, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x2a, 0x06, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x32, 0x25, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x66,
	0x6c, 0x61, 0x67, 0x52, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x04, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x04,
	0x57, 0x61, 0x69, 0x74, 0x32, 0x23, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20, 0x48, 0x65, 0x6c,
	0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x77, 0x61, 0x69, 0x74, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12,
	0x46, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30,
	0x92, 0x41, 0x2d, 0x2a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x32, 0x24, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x48, 0x6f, 0x6f,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x08, 0x4e,
	0x6f, 0x20, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x32, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20,
	0x48, 0x65, 0x6c, 0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x07, 0x6e, 0x6f, 0x48,
	0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x0b, 0x4d,
	0x61, 0x78, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x1b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x20,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x53, 0x75,
	0x62, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x32, 0x16, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x73, 0x75, 0x62, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x32, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x68, 0x65, 0x6c, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x20, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x32, 0x15, 0x72, 0x65, 0x75, 0x73, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x75, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a,
	0x0a, 0x53, 0x65, 0x74, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x24, 0x70, 0x61, 0x73,
	0x73, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x68, 0x65, 0x6c, 0x6d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x20, 0x61, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08,
	0x73, 0x6b, 0x69, 0x70, 0x43, 0x52, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x09, 0x53, 0x6b, 0x69, 0x70, 0x20, 0x43, 0x52, 0x44, 0x73, 0x32, 0x13,
	0x73, 0x6b, 0x69, 0x70, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x63,
	0x72, 0x64, 0x73, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x52, 0x44, 0x73, 0x12, 0x5d, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43,
	0x92, 0x41, 0x40, 0x2a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x32, 0x35, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x71, 0x0a, 0x0d,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x55, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x2a, 0x0f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x20, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x32, 0x35, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x55, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12,
	0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a,
	0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49,
	0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x34, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50,
	0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0b, 0x6b,
	0x65, 0x65, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0c, 0x4b, 0x65, 0x65, 0x70, 0x20, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x32, 0x27, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6b, 0x65,
	0x65, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x96, 0x01, 0x92, 0x41, 0x92, 0x01,
	0x0a, 0x34, 0x2a, 0x0c, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x24, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x32, 0x5a, 0x7b, 0x22, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x6e, 0x6f, 0x48, 0x6f, 0x6f, 0x6b,
	0x73, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x52,
	0x44, 0x73, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x5b, 0x22, 0x6b, 0x65, 0x79, 0x31, 0x3d, 0x76, 0x61,
	0x6c, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x6b, 0x65, 0x79, 0x32, 0x3d, 0x76, 0x61, 0x6c, 0x32, 0x22,
	0x5d, 0x7d, 0x22, 0xd6, 0x02, 0x0a, 0x0b, 0x59, 0x41, 0x4d, 0x4c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x32, 0x24, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20, 0x59, 0x41, 0x4d, 0x4c, 0x20, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x66,
	0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x54, 0x92,
	0x41, 0x51, 0x2a, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x50, 0x49, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x33,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65,
	0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x59,
	0x41, 0x4d, 0x4c, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x92,
	0x41, 0x69, 0x0a, 0x34, 0x2a, 0x0c, 0x59, 0x41, 0x4d, 0x4c, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x24, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x59, 0x41, 0x4d, 0x4c, 0x20, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x32, 0x31, 0x7b, 0x22, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x7d, 0x42, 0xff, 0x01, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x42,
	0x0e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2f, 0x76, 0x33, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x33, 0xa2, 0x02,
	0x04, 0x50, 0x44, 0x54, 0x43, 0xaa, 0x02, 0x1b, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x56, 0x33, 0xca, 0x02, 0x1b, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65,
	0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56,
	0x33, 0xe2, 0x02, 0x27, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65, 0x76, 0x5c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x33, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x33, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_commonpb_v3_artifacts_proto_rawDescOnce sync.Once
	file_proto_types_commonpb_v3_artifacts_proto_rawDescData = file_proto_types_commonpb_v3_artifacts_proto_rawDesc
)

func file_proto_types_commonpb_v3_artifacts_proto_rawDescGZIP() []byte {
	file_proto_types_commonpb_v3_artifacts_proto_rawDescOnce.Do(func() {
		file_proto_types_commonpb_v3_artifacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_commonpb_v3_artifacts_proto_rawDescData)
	})
	return file_proto_types_commonpb_v3_artifacts_proto_rawDescData
}

var file_proto_types_commonpb_v3_artifacts_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_types_commonpb_v3_artifacts_proto_goTypes = []interface{}{
	(*File)(nil),                 // 0: paralus.dev.types.common.v3.File
	(*UploadedYAMLArtifact)(nil), // 1: paralus.dev.types.common.v3.UploadedYAMLArtifact
	(*UploadedHelmArtifact)(nil), // 2: paralus.dev.types.common.v3.UploadedHelmArtifact
	(*YAMLInGitRepo)(nil),        // 3: paralus.dev.types.common.v3.YAMLInGitRepo
	(*HelmInGitRepo)(nil),        // 4: paralus.dev.types.common.v3.HelmInGitRepo
	(*HelmInHelmRepo)(nil),       // 5: paralus.dev.types.common.v3.HelmInHelmRepo
	(*ManagedAlertManager)(nil),  // 6: paralus.dev.types.common.v3.ManagedAlertManager
	(*ArtifactSpec)(nil),         // 7: paralus.dev.types.common.v3.ArtifactSpec
	(*HelmOptions)(nil),          // 8: paralus.dev.types.common.v3.HelmOptions
	(*YAMLOptions)(nil),          // 9: paralus.dev.types.common.v3.YAMLOptions
}
var file_proto_types_commonpb_v3_artifacts_proto_depIdxs = []int32{
	0,  // 0: paralus.dev.types.common.v3.UploadedYAMLArtifact.paths:type_name -> paralus.dev.types.common.v3.File
	0,  // 1: paralus.dev.types.common.v3.UploadedHelmArtifact.chartPath:type_name -> paralus.dev.types.common.v3.File
	0,  // 2: paralus.dev.types.common.v3.UploadedHelmArtifact.valuesPaths:type_name -> paralus.dev.types.common.v3.File
	0,  // 3: paralus.dev.types.common.v3.YAMLInGitRepo.paths:type_name -> paralus.dev.types.common.v3.File
	0,  // 4: paralus.dev.types.common.v3.HelmInGitRepo.chartPath:type_name -> paralus.dev.types.common.v3.File
	0,  // 5: paralus.dev.types.common.v3.HelmInGitRepo.valuesPaths:type_name -> paralus.dev.types.common.v3.File
	0,  // 6: paralus.dev.types.common.v3.HelmInHelmRepo.valuesPaths:type_name -> paralus.dev.types.common.v3.File
	0,  // 7: paralus.dev.types.common.v3.ManagedAlertManager.configmap:type_name -> paralus.dev.types.common.v3.File
	0,  // 8: paralus.dev.types.common.v3.ManagedAlertManager.secret:type_name -> paralus.dev.types.common.v3.File
	0,  // 9: paralus.dev.types.common.v3.ManagedAlertManager.configuration:type_name -> paralus.dev.types.common.v3.File
	0,  // 10: paralus.dev.types.common.v3.ManagedAlertManager.statefulset:type_name -> paralus.dev.types.common.v3.File
	1,  // 11: paralus.dev.types.common.v3.ArtifactSpec.uploadedYAML:type_name -> paralus.dev.types.common.v3.UploadedYAMLArtifact
	2,  // 12: paralus.dev.types.common.v3.ArtifactSpec.uploadedHelm:type_name -> paralus.dev.types.common.v3.UploadedHelmArtifact
	3,  // 13: paralus.dev.types.common.v3.ArtifactSpec.yamlInGitRepo:type_name -> paralus.dev.types.common.v3.YAMLInGitRepo
	4,  // 14: paralus.dev.types.common.v3.ArtifactSpec.helmInGitRepo:type_name -> paralus.dev.types.common.v3.HelmInGitRepo
	5,  // 15: paralus.dev.types.common.v3.ArtifactSpec.helmInHelmRepo:type_name -> paralus.dev.types.common.v3.HelmInHelmRepo
	6,  // 16: paralus.dev.types.common.v3.ArtifactSpec.managedAlertManger:type_name -> paralus.dev.types.common.v3.ManagedAlertManager
	8,  // 17: paralus.dev.types.common.v3.ArtifactSpec.helmOptions:type_name -> paralus.dev.types.common.v3.HelmOptions
	9,  // 18: paralus.dev.types.common.v3.ArtifactSpec.yamlOptions:type_name -> paralus.dev.types.common.v3.YAMLOptions
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_types_commonpb_v3_artifacts_proto_init() }
func file_proto_types_commonpb_v3_artifacts_proto_init() {
	if File_proto_types_commonpb_v3_artifacts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedYAMLArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedHelmArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YAMLInGitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmInGitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmInHelmRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedAlertManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_commonpb_v3_artifacts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YAMLOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_types_commonpb_v3_artifacts_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ArtifactSpec_UploadedYAML)(nil),
		(*ArtifactSpec_UploadedHelm)(nil),
		(*ArtifactSpec_YamlInGitRepo)(nil),
		(*ArtifactSpec_HelmInGitRepo)(nil),
		(*ArtifactSpec_HelmInHelmRepo)(nil),
		(*ArtifactSpec_ManagedAlertManger)(nil),
		(*ArtifactSpec_HelmOptions)(nil),
		(*ArtifactSpec_YamlOptions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_commonpb_v3_artifacts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_commonpb_v3_artifacts_proto_goTypes,
		DependencyIndexes: file_proto_types_commonpb_v3_artifacts_proto_depIdxs,
		MessageInfos:      file_proto_types_commonpb_v3_artifacts_proto_msgTypes,
	}.Build()
	File_proto_types_commonpb_v3_artifacts_proto = out.File
	file_proto_types_commonpb_v3_artifacts_proto_rawDesc = nil
	file_proto_types_commonpb_v3_artifacts_proto_goTypes = nil
	file_proto_types_commonpb_v3_artifacts_proto_depIdxs = nil
}
