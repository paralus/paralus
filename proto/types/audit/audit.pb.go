// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/types/audit/audit.proto

package auditv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregations *Aggregations `protobuf:"bytes,1,opt,name=aggregations,proto3" json:"aggregations,omitempty"`
	Hits         *Hits         `protobuf:"bytes,2,opt,name=hits,proto3" json:"hits,omitempty"`
}

func (x *AuditResponse) Reset() {
	*x = AuditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResponse) ProtoMessage() {}

func (x *AuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResponse.ProtoReflect.Descriptor instead.
func (*AuditResponse) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{0}
}

func (x *AuditResponse) GetAggregations() *Aggregations {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *AuditResponse) GetHits() *Hits {
	if x != nil {
		return x.Hits
	}
	return nil
}

type Aggregations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupByType      *AggregatorGroup `protobuf:"bytes,1,opt,name=group_by_type,json=groupByType,proto3" json:"group_by_type,omitempty"`
	GroupByUsername  *AggregatorGroup `protobuf:"bytes,2,opt,name=group_by_username,json=groupByUsername,proto3" json:"group_by_username,omitempty"`
	GroupByCluster   *AggregatorGroup `protobuf:"bytes,3,opt,name=group_by_cluster,json=groupByCluster,proto3" json:"group_by_cluster,omitempty"`
	GroupByKind      *AggregatorGroup `protobuf:"bytes,4,opt,name=group_by_kind,json=groupByKind,proto3" json:"group_by_kind,omitempty"`
	GroupByMethod    *AggregatorGroup `protobuf:"bytes,5,opt,name=group_by_method,json=groupByMethod,proto3" json:"group_by_method,omitempty"`
	GroupByNamespace *AggregatorGroup `protobuf:"bytes,6,opt,name=group_by_namespace,json=groupByNamespace,proto3" json:"group_by_namespace,omitempty"`
	GroupByProject   *AggregatorGroup `protobuf:"bytes,7,opt,name=group_by_project,json=groupByProject,proto3" json:"group_by_project,omitempty"`
}

func (x *Aggregations) Reset() {
	*x = Aggregations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregations) ProtoMessage() {}

func (x *Aggregations) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregations.ProtoReflect.Descriptor instead.
func (*Aggregations) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{1}
}

func (x *Aggregations) GetGroupByType() *AggregatorGroup {
	if x != nil {
		return x.GroupByType
	}
	return nil
}

func (x *Aggregations) GetGroupByUsername() *AggregatorGroup {
	if x != nil {
		return x.GroupByUsername
	}
	return nil
}

func (x *Aggregations) GetGroupByCluster() *AggregatorGroup {
	if x != nil {
		return x.GroupByCluster
	}
	return nil
}

func (x *Aggregations) GetGroupByKind() *AggregatorGroup {
	if x != nil {
		return x.GroupByKind
	}
	return nil
}

func (x *Aggregations) GetGroupByMethod() *AggregatorGroup {
	if x != nil {
		return x.GroupByMethod
	}
	return nil
}

func (x *Aggregations) GetGroupByNamespace() *AggregatorGroup {
	if x != nil {
		return x.GroupByNamespace
	}
	return nil
}

func (x *Aggregations) GetGroupByProject() *AggregatorGroup {
	if x != nil {
		return x.GroupByProject
	}
	return nil
}

type AggregatorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*GroupByType `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *AggregatorGroup) Reset() {
	*x = AggregatorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatorGroup) ProtoMessage() {}

func (x *AggregatorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatorGroup.ProtoReflect.Descriptor instead.
func (*AggregatorGroup) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{2}
}

func (x *AggregatorGroup) GetBuckets() []*GroupByType {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type GroupByType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocCount int32  `protobuf:"varint,1,opt,name=doc_count,json=docCount,proto3" json:"doc_count,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GroupByType) Reset() {
	*x = GroupByType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByType) ProtoMessage() {}

func (x *GroupByType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByType.ProtoReflect.Descriptor instead.
func (*GroupByType) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{3}
}

func (x *GroupByType) GetDocCount() int32 {
	if x != nil {
		return x.DocCount
	}
	return 0
}

func (x *GroupByType) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DataSourceJSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json *Data `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *DataSourceJSON) Reset() {
	*x = DataSourceJSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceJSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceJSON) ProtoMessage() {}

func (x *DataSourceJSON) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceJSON.ProtoReflect.Descriptor instead.
func (*DataSourceJSON) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{4}
}

func (x *DataSourceJSON) GetJson() *Data {
	if x != nil {
		return x.Json
	}
	return nil
}

type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSource *DataSourceJSON `protobuf:"bytes,1,opt,name=_source,json=Source,proto3" json:"_source,omitempty"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{5}
}

func (x *DataSource) GetXSource() *DataSourceJSON {
	if x != nil {
		return x.XSource
	}
	return nil
}

type Hits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits []*DataSource `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
}

func (x *Hits) Reset() {
	*x = Hits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hits) ProtoMessage() {}

func (x *Hits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hits.ProtoReflect.Descriptor instead.
func (*Hits) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{6}
}

func (x *Hits) GetHits() []*DataSource {
	if x != nil {
		return x.Hits
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor     *Actor  `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Category  string  `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Client    *Client `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Detail    *Detail `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Origin    string  `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	Portal    string  `protobuf:"bytes,6,opt,name=portal,proto3" json:"portal,omitempty"`
	Project   string  `protobuf:"bytes,7,opt,name=project,proto3" json:"project,omitempty"`
	Timestamp string  `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Version   string  `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// below are for kubectl api, attribute names are maintained as below for consistency with es. need to be refactored to be more meaningful.
	Av  string  `protobuf:"bytes,11,opt,name=av,proto3" json:"av,omitempty"`
	Cn  string  `protobuf:"bytes,12,opt,name=cn,proto3" json:"cn,omitempty"`
	D   float64 `protobuf:"fixed64,13,opt,name=d,proto3" json:"d,omitempty"`
	Id  string  `protobuf:"bytes,14,opt,name=id,proto3" json:"id,omitempty"`
	K   string  `protobuf:"bytes,15,opt,name=k,proto3" json:"k,omitempty"`
	M   string  `protobuf:"bytes,16,opt,name=m,proto3" json:"m,omitempty"`
	N   string  `protobuf:"bytes,17,opt,name=n,proto3" json:"n,omitempty"`
	Ns  string  `protobuf:"bytes,18,opt,name=ns,proto3" json:"ns,omitempty"`
	O   string  `protobuf:"bytes,19,opt,name=o,proto3" json:"o,omitempty"`
	P   string  `protobuf:"bytes,20,opt,name=p,proto3" json:"p,omitempty"`
	Q   string  `protobuf:"bytes,21,opt,name=q,proto3" json:"q,omitempty"`
	Ra  string  `protobuf:"bytes,22,opt,name=ra,proto3" json:"ra,omitempty"`
	Sc  int32   `protobuf:"varint,23,opt,name=sc,proto3" json:"sc,omitempty"`
	St  string  `protobuf:"bytes,24,opt,name=st,proto3" json:"st,omitempty"`
	Ts  string  `protobuf:"bytes,25,opt,name=ts,proto3" json:"ts,omitempty"`
	Un  string  `protobuf:"bytes,26,opt,name=un,proto3" json:"un,omitempty"`
	Url string  `protobuf:"bytes,27,opt,name=url,proto3" json:"url,omitempty"`
	W   int32   `protobuf:"varint,28,opt,name=w,proto3" json:"w,omitempty"`
	Pr  string  `protobuf:"bytes,29,opt,name=pr,proto3" json:"pr,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{7}
}

func (x *Data) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Data) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Data) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Data) GetDetail() *Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *Data) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Data) GetPortal() string {
	if x != nil {
		return x.Portal
	}
	return ""
}

func (x *Data) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Data) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Data) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Data) GetAv() string {
	if x != nil {
		return x.Av
	}
	return ""
}

func (x *Data) GetCn() string {
	if x != nil {
		return x.Cn
	}
	return ""
}

func (x *Data) GetD() float64 {
	if x != nil {
		return x.D
	}
	return 0
}

func (x *Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Data) GetK() string {
	if x != nil {
		return x.K
	}
	return ""
}

func (x *Data) GetM() string {
	if x != nil {
		return x.M
	}
	return ""
}

func (x *Data) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *Data) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

func (x *Data) GetO() string {
	if x != nil {
		return x.O
	}
	return ""
}

func (x *Data) GetP() string {
	if x != nil {
		return x.P
	}
	return ""
}

func (x *Data) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *Data) GetRa() string {
	if x != nil {
		return x.Ra
	}
	return ""
}

func (x *Data) GetSc() int32 {
	if x != nil {
		return x.Sc
	}
	return 0
}

func (x *Data) GetSt() string {
	if x != nil {
		return x.St
	}
	return ""
}

func (x *Data) GetTs() string {
	if x != nil {
		return x.Ts
	}
	return ""
}

func (x *Data) GetUn() string {
	if x != nil {
		return x.Un
	}
	return ""
}

func (x *Data) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Data) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Data) GetPr() string {
	if x != nil {
		return x.Pr
	}
	return ""
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Groups  []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{8}
}

func (x *Actor) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Actor) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Actor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{9}
}

func (x *Account) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	UserAgent string `protobuf:"bytes,4,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{10}
}

func (x *Client) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Client) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Client) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Client) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Meta    *DetailMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Detail) Reset() {
	*x = Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{11}
}

func (x *Detail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Detail) GetMeta() *DetailMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DetailMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *DetailMeta) Reset() {
	*x = DetailMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_audit_audit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailMeta) ProtoMessage() {}

func (x *DetailMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_audit_audit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailMeta.ProtoReflect.Descriptor instead.
func (*DetailMeta) Descriptor() ([]byte, []int) {
	return file_proto_types_audit_audit_proto_rawDescGZIP(), []int{12}
}

func (x *DetailMeta) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

var File_proto_types_audit_audit_proto protoreflect.FileDescriptor

var file_proto_types_audit_audit_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a,
	0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x04,
	0x68, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x74, 0x73, 0x52, 0x04, 0x68, 0x69,
	0x74, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a,
	0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x54, 0x0a, 0x0f,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x41, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x46, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x53,
	0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a,
	0x53, 0x4f, 0x4e, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x48,
	0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22,
	0x8b, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x61,
	0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x70, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x72, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x75, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x0c, 0x0a, 0x01, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0e, 0x0a,
	0x02, 0x70, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x72, 0x22, 0x72, 0x0a,
	0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x25, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x06, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x0a, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0xef, 0x01, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x76,
	0x31, 0xa2, 0x02, 0x04, 0x50, 0x44, 0x54, 0x41, 0xaa, 0x02, 0x1a, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c,
	0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x26, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65, 0x76,
	0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_audit_audit_proto_rawDescOnce sync.Once
	file_proto_types_audit_audit_proto_rawDescData = file_proto_types_audit_audit_proto_rawDesc
)

func file_proto_types_audit_audit_proto_rawDescGZIP() []byte {
	file_proto_types_audit_audit_proto_rawDescOnce.Do(func() {
		file_proto_types_audit_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_audit_audit_proto_rawDescData)
	})
	return file_proto_types_audit_audit_proto_rawDescData
}

var file_proto_types_audit_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_types_audit_audit_proto_goTypes = []interface{}{
	(*AuditResponse)(nil),   // 0: paralus.dev.types.audit.v1.AuditResponse
	(*Aggregations)(nil),    // 1: paralus.dev.types.audit.v1.Aggregations
	(*AggregatorGroup)(nil), // 2: paralus.dev.types.audit.v1.AggregatorGroup
	(*GroupByType)(nil),     // 3: paralus.dev.types.audit.v1.GroupByType
	(*DataSourceJSON)(nil),  // 4: paralus.dev.types.audit.v1.DataSourceJSON
	(*DataSource)(nil),      // 5: paralus.dev.types.audit.v1.DataSource
	(*Hits)(nil),            // 6: paralus.dev.types.audit.v1.Hits
	(*Data)(nil),            // 7: paralus.dev.types.audit.v1.Data
	(*Actor)(nil),           // 8: paralus.dev.types.audit.v1.Actor
	(*Account)(nil),         // 9: paralus.dev.types.audit.v1.Account
	(*Client)(nil),          // 10: paralus.dev.types.audit.v1.Client
	(*Detail)(nil),          // 11: paralus.dev.types.audit.v1.Detail
	(*DetailMeta)(nil),      // 12: paralus.dev.types.audit.v1.DetailMeta
}
var file_proto_types_audit_audit_proto_depIdxs = []int32{
	1,  // 0: paralus.dev.types.audit.v1.AuditResponse.aggregations:type_name -> paralus.dev.types.audit.v1.Aggregations
	6,  // 1: paralus.dev.types.audit.v1.AuditResponse.hits:type_name -> paralus.dev.types.audit.v1.Hits
	2,  // 2: paralus.dev.types.audit.v1.Aggregations.group_by_type:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	2,  // 3: paralus.dev.types.audit.v1.Aggregations.group_by_username:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	2,  // 4: paralus.dev.types.audit.v1.Aggregations.group_by_cluster:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	2,  // 5: paralus.dev.types.audit.v1.Aggregations.group_by_kind:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	2,  // 6: paralus.dev.types.audit.v1.Aggregations.group_by_method:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	2,  // 7: paralus.dev.types.audit.v1.Aggregations.group_by_namespace:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	2,  // 8: paralus.dev.types.audit.v1.Aggregations.group_by_project:type_name -> paralus.dev.types.audit.v1.AggregatorGroup
	3,  // 9: paralus.dev.types.audit.v1.AggregatorGroup.buckets:type_name -> paralus.dev.types.audit.v1.GroupByType
	7,  // 10: paralus.dev.types.audit.v1.DataSourceJSON.json:type_name -> paralus.dev.types.audit.v1.Data
	4,  // 11: paralus.dev.types.audit.v1.DataSource._source:type_name -> paralus.dev.types.audit.v1.DataSourceJSON
	5,  // 12: paralus.dev.types.audit.v1.Hits.hits:type_name -> paralus.dev.types.audit.v1.DataSource
	8,  // 13: paralus.dev.types.audit.v1.Data.actor:type_name -> paralus.dev.types.audit.v1.Actor
	10, // 14: paralus.dev.types.audit.v1.Data.client:type_name -> paralus.dev.types.audit.v1.Client
	11, // 15: paralus.dev.types.audit.v1.Data.detail:type_name -> paralus.dev.types.audit.v1.Detail
	9,  // 16: paralus.dev.types.audit.v1.Actor.account:type_name -> paralus.dev.types.audit.v1.Account
	12, // 17: paralus.dev.types.audit.v1.Detail.meta:type_name -> paralus.dev.types.audit.v1.DetailMeta
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_types_audit_audit_proto_init() }
func file_proto_types_audit_audit_proto_init() {
	if File_proto_types_audit_audit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_audit_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceJSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_audit_audit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_audit_audit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_audit_audit_proto_goTypes,
		DependencyIndexes: file_proto_types_audit_audit_proto_depIdxs,
		MessageInfos:      file_proto_types_audit_audit_proto_msgTypes,
	}.Build()
	File_proto_types_audit_audit_proto = out.File
	file_proto_types_audit_audit_proto_rawDesc = nil
	file_proto_types_audit_audit_proto_goTypes = nil
	file_proto_types_audit_audit_proto_depIdxs = nil
}
