syntax = "proto3";
package paralus.dev.rpc.system.v3;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/types/commonpb/v3/common.proto";
import "proto/types/systempb/v3/oidc_provider.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "OIdC Provider Service"
    version : "3.0"
    contact : {name : "Paralus Dev"}
  }
  schemes : HTTPS
  consumes : "application/json"
  consumes : "application/yaml"
  produces : "application/json"
  produces : "application/yaml"
  security_definitions : {
    security : {
      key : "BasicAuth"
      value : {type : TYPE_BASIC}
    }
    security : {
      key : "ApiKeyAuth"
      value : {type : TYPE_API_KEY in : IN_HEADER name : "X-API-KEYID"}
    }
    security : {
      key : "ApiTokenAuth"
      value : {
        type : TYPE_API_KEY in : IN_HEADER name : "X-API-TOKEN"
      }
    }
  }
  security : {
    security_requirement : {
      key : "BasicAuth"
      value : {}
    }
    security_requirement : {
      key : "ApiKeyAuth"
      value : {}
    }
    security_requirement : {
      key : "ApiTokenAuth"
      value : {}
    }
  }
  responses : {
    key : "403"
    value : {
      description : "Returned when the user does not have permission to access "
                    "the resource."
    }
  }
  responses : {
    key : "404"
    value : {
      description : "Returned when the resource does not exist."
      schema : {json_schema : {type : STRING}}
    }
  }
};

service OIDCProviderService {
  rpc CreateOIDCProvider(paralus.dev.types.system.v3.OIDCProvider) returns (paralus.dev.types.system.v3.OIDCProvider) {
    option (google.api.http) = {
      post : "/auth/v3/sso/oidc/provider"
      body : "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses : {
        key : "201"
        value : {description : "Returned when oidc provider is created successfully."}
      }
    };
  }

  rpc GetOIDCProvider(paralus.dev.types.system.v3.OIDCProvider) returns (paralus.dev.types.system.v3.OIDCProvider) {
    option (google.api.http) = {
      get : "/auth/v3/sso/oidc/provider/{metadata.name}" // TODO: Handle the case when there is / in name
    };
  };

  rpc ListOIDCProvider(paralus.dev.types.common.v3.Empty) returns (paralus.dev.types.system.v3.OIDCProviderList) {
    option (google.api.http) = {
      get : "/auth/v3/sso/oidc/provider"
    };
  };

  rpc UpdateOIDCProvider(paralus.dev.types.system.v3.OIDCProvider) returns (paralus.dev.types.system.v3.OIDCProvider) {
    option (google.api.http) = {
      put : "/auth/v3/sso/oidc/provider/{metadata.name}"
      body : "*"
    };
  };

  rpc DeleteOIDCProvider(paralus.dev.types.system.v3.OIDCProvider) returns (paralus.dev.types.common.v3.Empty) {
    option (google.api.http) = {
      delete : "/auth/v3/sso/oidc/provider/{metadata.name}"
    };

   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses : {
        key : "204"
        value : {
          description : "Returned when oidc provider is deleted successfully."
        }
      }
    };
  };
}
