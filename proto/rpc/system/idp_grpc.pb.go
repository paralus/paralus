// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rpc/system/idp.proto

package systemv3

import (
	context "context"
	v31 "github.com/paralus/paralus/proto/types/commonpb/v3"
	v3 "github.com/paralus/paralus/proto/types/systempb/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdpService_CreateIdp_FullMethodName = "/paralus.dev.rpc.system.v3.IdpService/CreateIdp"
	IdpService_GetIdp_FullMethodName    = "/paralus.dev.rpc.system.v3.IdpService/GetIdp"
	IdpService_ListIdps_FullMethodName  = "/paralus.dev.rpc.system.v3.IdpService/ListIdps"
	IdpService_UpdateIdp_FullMethodName = "/paralus.dev.rpc.system.v3.IdpService/UpdateIdp"
	IdpService_DeleteIdp_FullMethodName = "/paralus.dev.rpc.system.v3.IdpService/DeleteIdp"
)

// IdpServiceClient is the client API for IdpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdpServiceClient interface {
	CreateIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v3.Idp, error)
	GetIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v3.Idp, error)
	ListIdps(ctx context.Context, in *v31.Empty, opts ...grpc.CallOption) (*v3.IdpList, error)
	UpdateIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v3.Idp, error)
	DeleteIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v31.Empty, error)
}

type idpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdpServiceClient(cc grpc.ClientConnInterface) IdpServiceClient {
	return &idpServiceClient{cc}
}

func (c *idpServiceClient) CreateIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v3.Idp, error) {
	out := new(v3.Idp)
	err := c.cc.Invoke(ctx, IdpService_CreateIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpServiceClient) GetIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v3.Idp, error) {
	out := new(v3.Idp)
	err := c.cc.Invoke(ctx, IdpService_GetIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpServiceClient) ListIdps(ctx context.Context, in *v31.Empty, opts ...grpc.CallOption) (*v3.IdpList, error) {
	out := new(v3.IdpList)
	err := c.cc.Invoke(ctx, IdpService_ListIdps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpServiceClient) UpdateIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v3.Idp, error) {
	out := new(v3.Idp)
	err := c.cc.Invoke(ctx, IdpService_UpdateIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpServiceClient) DeleteIdp(ctx context.Context, in *v3.Idp, opts ...grpc.CallOption) (*v31.Empty, error) {
	out := new(v31.Empty)
	err := c.cc.Invoke(ctx, IdpService_DeleteIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdpServiceServer is the server API for IdpService service.
// All implementations should embed UnimplementedIdpServiceServer
// for forward compatibility
type IdpServiceServer interface {
	CreateIdp(context.Context, *v3.Idp) (*v3.Idp, error)
	GetIdp(context.Context, *v3.Idp) (*v3.Idp, error)
	ListIdps(context.Context, *v31.Empty) (*v3.IdpList, error)
	UpdateIdp(context.Context, *v3.Idp) (*v3.Idp, error)
	DeleteIdp(context.Context, *v3.Idp) (*v31.Empty, error)
}

// UnimplementedIdpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIdpServiceServer struct {
}

func (UnimplementedIdpServiceServer) CreateIdp(context.Context, *v3.Idp) (*v3.Idp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdp not implemented")
}
func (UnimplementedIdpServiceServer) GetIdp(context.Context, *v3.Idp) (*v3.Idp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdp not implemented")
}
func (UnimplementedIdpServiceServer) ListIdps(context.Context, *v31.Empty) (*v3.IdpList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdps not implemented")
}
func (UnimplementedIdpServiceServer) UpdateIdp(context.Context, *v3.Idp) (*v3.Idp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdp not implemented")
}
func (UnimplementedIdpServiceServer) DeleteIdp(context.Context, *v3.Idp) (*v31.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdp not implemented")
}

// UnsafeIdpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdpServiceServer will
// result in compilation errors.
type UnsafeIdpServiceServer interface {
	mustEmbedUnimplementedIdpServiceServer()
}

func RegisterIdpServiceServer(s grpc.ServiceRegistrar, srv IdpServiceServer) {
	s.RegisterService(&IdpService_ServiceDesc, srv)
}

func _IdpService_CreateIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.Idp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpServiceServer).CreateIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpService_CreateIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpServiceServer).CreateIdp(ctx, req.(*v3.Idp))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpService_GetIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.Idp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpServiceServer).GetIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpService_GetIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpServiceServer).GetIdp(ctx, req.(*v3.Idp))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpService_ListIdps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v31.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpServiceServer).ListIdps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpService_ListIdps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpServiceServer).ListIdps(ctx, req.(*v31.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpService_UpdateIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.Idp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpServiceServer).UpdateIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpService_UpdateIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpServiceServer).UpdateIdp(ctx, req.(*v3.Idp))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpService_DeleteIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.Idp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpServiceServer).DeleteIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpService_DeleteIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpServiceServer).DeleteIdp(ctx, req.(*v3.Idp))
	}
	return interceptor(ctx, in, info, handler)
}

// IdpService_ServiceDesc is the grpc.ServiceDesc for IdpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paralus.dev.rpc.system.v3.IdpService",
	HandlerType: (*IdpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdp",
			Handler:    _IdpService_CreateIdp_Handler,
		},
		{
			MethodName: "GetIdp",
			Handler:    _IdpService_GetIdp_Handler,
		},
		{
			MethodName: "ListIdps",
			Handler:    _IdpService_ListIdps_Handler,
		},
		{
			MethodName: "UpdateIdp",
			Handler:    _IdpService_UpdateIdp_Handler,
		},
		{
			MethodName: "DeleteIdp",
			Handler:    _IdpService_DeleteIdp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/system/idp.proto",
}
