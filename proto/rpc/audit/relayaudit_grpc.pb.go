// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rpc/audit/relayaudit.proto

package eventv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelayAuditService_GetRelayAudit_FullMethodName           = "/rep.framework.event.v1.RelayAuditService/GetRelayAudit"
	RelayAuditService_GetRelayAuditByProjects_FullMethodName = "/rep.framework.event.v1.RelayAuditService/GetRelayAuditByProjects"
)

// RelayAuditServiceClient is the client API for RelayAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayAuditServiceClient interface {
	GetRelayAudit(ctx context.Context, in *RelayAuditRequest, opts ...grpc.CallOption) (*RelayAuditResponse, error)
	GetRelayAuditByProjects(ctx context.Context, in *RelayAuditRequest, opts ...grpc.CallOption) (*RelayAuditResponse, error)
}

type relayAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayAuditServiceClient(cc grpc.ClientConnInterface) RelayAuditServiceClient {
	return &relayAuditServiceClient{cc}
}

func (c *relayAuditServiceClient) GetRelayAudit(ctx context.Context, in *RelayAuditRequest, opts ...grpc.CallOption) (*RelayAuditResponse, error) {
	out := new(RelayAuditResponse)
	err := c.cc.Invoke(ctx, RelayAuditService_GetRelayAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayAuditServiceClient) GetRelayAuditByProjects(ctx context.Context, in *RelayAuditRequest, opts ...grpc.CallOption) (*RelayAuditResponse, error) {
	out := new(RelayAuditResponse)
	err := c.cc.Invoke(ctx, RelayAuditService_GetRelayAuditByProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayAuditServiceServer is the server API for RelayAuditService service.
// All implementations should embed UnimplementedRelayAuditServiceServer
// for forward compatibility
type RelayAuditServiceServer interface {
	GetRelayAudit(context.Context, *RelayAuditRequest) (*RelayAuditResponse, error)
	GetRelayAuditByProjects(context.Context, *RelayAuditRequest) (*RelayAuditResponse, error)
}

// UnimplementedRelayAuditServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRelayAuditServiceServer struct {
}

func (UnimplementedRelayAuditServiceServer) GetRelayAudit(context.Context, *RelayAuditRequest) (*RelayAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayAudit not implemented")
}
func (UnimplementedRelayAuditServiceServer) GetRelayAuditByProjects(context.Context, *RelayAuditRequest) (*RelayAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayAuditByProjects not implemented")
}

// UnsafeRelayAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayAuditServiceServer will
// result in compilation errors.
type UnsafeRelayAuditServiceServer interface {
	mustEmbedUnimplementedRelayAuditServiceServer()
}

func RegisterRelayAuditServiceServer(s grpc.ServiceRegistrar, srv RelayAuditServiceServer) {
	s.RegisterService(&RelayAuditService_ServiceDesc, srv)
}

func _RelayAuditService_GetRelayAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayAuditServiceServer).GetRelayAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayAuditService_GetRelayAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayAuditServiceServer).GetRelayAudit(ctx, req.(*RelayAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayAuditService_GetRelayAuditByProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayAuditServiceServer).GetRelayAuditByProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayAuditService_GetRelayAuditByProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayAuditServiceServer).GetRelayAuditByProjects(ctx, req.(*RelayAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayAuditService_ServiceDesc is the grpc.ServiceDesc for RelayAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rep.framework.event.v1.RelayAuditService",
	HandlerType: (*RelayAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRelayAudit",
			Handler:    _RelayAuditService_GetRelayAudit_Handler,
		},
		{
			MethodName: "GetRelayAuditByProjects",
			Handler:    _RelayAuditService_GetRelayAuditByProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/audit/relayaudit.proto",
}
