// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rpc/sentry/kubectl_cluster.proto

package sentry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubectlClusterSettingsService_UpdateKubectlClusterSettings_FullMethodName = "/paralus.dev.sentry.rpc.KubectlClusterSettingsService/UpdateKubectlClusterSettings"
	KubectlClusterSettingsService_GetKubectlClusterSettings_FullMethodName    = "/paralus.dev.sentry.rpc.KubectlClusterSettingsService/GetKubectlClusterSettings"
)

// KubectlClusterSettingsServiceClient is the client API for KubectlClusterSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubectlClusterSettingsServiceClient interface {
	UpdateKubectlClusterSettings(ctx context.Context, in *UpdateKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*UpdateKubectlClusterSettingsResponse, error)
	GetKubectlClusterSettings(ctx context.Context, in *GetKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*GetKubectlClusterSettingsResponse, error)
}

type kubectlClusterSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubectlClusterSettingsServiceClient(cc grpc.ClientConnInterface) KubectlClusterSettingsServiceClient {
	return &kubectlClusterSettingsServiceClient{cc}
}

func (c *kubectlClusterSettingsServiceClient) UpdateKubectlClusterSettings(ctx context.Context, in *UpdateKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*UpdateKubectlClusterSettingsResponse, error) {
	out := new(UpdateKubectlClusterSettingsResponse)
	err := c.cc.Invoke(ctx, KubectlClusterSettingsService_UpdateKubectlClusterSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubectlClusterSettingsServiceClient) GetKubectlClusterSettings(ctx context.Context, in *GetKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*GetKubectlClusterSettingsResponse, error) {
	out := new(GetKubectlClusterSettingsResponse)
	err := c.cc.Invoke(ctx, KubectlClusterSettingsService_GetKubectlClusterSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubectlClusterSettingsServiceServer is the server API for KubectlClusterSettingsService service.
// All implementations should embed UnimplementedKubectlClusterSettingsServiceServer
// for forward compatibility
type KubectlClusterSettingsServiceServer interface {
	UpdateKubectlClusterSettings(context.Context, *UpdateKubectlClusterSettingsRequest) (*UpdateKubectlClusterSettingsResponse, error)
	GetKubectlClusterSettings(context.Context, *GetKubectlClusterSettingsRequest) (*GetKubectlClusterSettingsResponse, error)
}

// UnimplementedKubectlClusterSettingsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKubectlClusterSettingsServiceServer struct {
}

func (UnimplementedKubectlClusterSettingsServiceServer) UpdateKubectlClusterSettings(context.Context, *UpdateKubectlClusterSettingsRequest) (*UpdateKubectlClusterSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubectlClusterSettings not implemented")
}
func (UnimplementedKubectlClusterSettingsServiceServer) GetKubectlClusterSettings(context.Context, *GetKubectlClusterSettingsRequest) (*GetKubectlClusterSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubectlClusterSettings not implemented")
}

// UnsafeKubectlClusterSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubectlClusterSettingsServiceServer will
// result in compilation errors.
type UnsafeKubectlClusterSettingsServiceServer interface {
	mustEmbedUnimplementedKubectlClusterSettingsServiceServer()
}

func RegisterKubectlClusterSettingsServiceServer(s grpc.ServiceRegistrar, srv KubectlClusterSettingsServiceServer) {
	s.RegisterService(&KubectlClusterSettingsService_ServiceDesc, srv)
}

func _KubectlClusterSettingsService_UpdateKubectlClusterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubectlClusterSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubectlClusterSettingsServiceServer).UpdateKubectlClusterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubectlClusterSettingsService_UpdateKubectlClusterSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubectlClusterSettingsServiceServer).UpdateKubectlClusterSettings(ctx, req.(*UpdateKubectlClusterSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubectlClusterSettingsService_GetKubectlClusterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubectlClusterSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubectlClusterSettingsServiceServer).GetKubectlClusterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubectlClusterSettingsService_GetKubectlClusterSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubectlClusterSettingsServiceServer).GetKubectlClusterSettings(ctx, req.(*GetKubectlClusterSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubectlClusterSettingsService_ServiceDesc is the grpc.ServiceDesc for KubectlClusterSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubectlClusterSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paralus.dev.sentry.rpc.KubectlClusterSettingsService",
	HandlerType: (*KubectlClusterSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateKubectlClusterSettings",
			Handler:    _KubectlClusterSettingsService_UpdateKubectlClusterSettings_Handler,
		},
		{
			MethodName: "GetKubectlClusterSettings",
			Handler:    _KubectlClusterSettingsService_GetKubectlClusterSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/sentry/kubectl_cluster.proto",
}
