// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rpc/sentry/bootstrap.proto

package sentry

import (
	context "context"
	v3 "github.com/paralus/paralus/proto/types/commonpb/v3"
	sentry "github.com/paralus/paralus/proto/types/sentry"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BootstrapService_PatchBootstrapInfra_FullMethodName         = "/paralus.dev.sentry.rpc.BootstrapService/PatchBootstrapInfra"
	BootstrapService_GetBootstrapInfra_FullMethodName           = "/paralus.dev.sentry.rpc.BootstrapService/GetBootstrapInfra"
	BootstrapService_PatchBootstrapAgentTemplate_FullMethodName = "/paralus.dev.sentry.rpc.BootstrapService/PatchBootstrapAgentTemplate"
	BootstrapService_GetBootstrapAgentTemplate_FullMethodName   = "/paralus.dev.sentry.rpc.BootstrapService/GetBootstrapAgentTemplate"
	BootstrapService_GetBootstrapAgentTemplates_FullMethodName  = "/paralus.dev.sentry.rpc.BootstrapService/GetBootstrapAgentTemplates"
	BootstrapService_RegisterBootstrapAgent_FullMethodName      = "/paralus.dev.sentry.rpc.BootstrapService/RegisterBootstrapAgent"
	BootstrapService_GetBootstrapAgentConfig_FullMethodName     = "/paralus.dev.sentry.rpc.BootstrapService/GetBootstrapAgentConfig"
	BootstrapService_CreateBootstrapAgent_FullMethodName        = "/paralus.dev.sentry.rpc.BootstrapService/CreateBootstrapAgent"
	BootstrapService_GetBootstrapAgent_FullMethodName           = "/paralus.dev.sentry.rpc.BootstrapService/GetBootstrapAgent"
	BootstrapService_GetBootstrapAgents_FullMethodName          = "/paralus.dev.sentry.rpc.BootstrapService/GetBootstrapAgents"
	BootstrapService_DeleteBootstrapAgent_FullMethodName        = "/paralus.dev.sentry.rpc.BootstrapService/DeleteBootstrapAgent"
	BootstrapService_UpdateBootstrapAgent_FullMethodName        = "/paralus.dev.sentry.rpc.BootstrapService/UpdateBootstrapAgent"
)

// BootstrapServiceClient is the client API for BootstrapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapServiceClient interface {
	PatchBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error)
	GetBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error)
	PatchBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplates(ctx context.Context, in *v3.QueryOptions, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplateList, error)
	RegisterBootstrapAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	GetBootstrapAgentConfig(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*v3.HttpBody, error)
	CreateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error)
	GetBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error)
	GetBootstrapAgents(ctx context.Context, in *GetBootstrapAgentsRequest, opts ...grpc.CallOption) (*sentry.BootstrapAgentList, error)
	DeleteBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*DeleteBootstrapAgentResponse, error)
	UpdateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error)
}

type bootstrapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapServiceClient(cc grpc.ClientConnInterface) BootstrapServiceClient {
	return &bootstrapServiceClient{cc}
}

func (c *bootstrapServiceClient) PatchBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error) {
	out := new(sentry.BootstrapInfra)
	err := c.cc.Invoke(ctx, BootstrapService_PatchBootstrapInfra_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error) {
	out := new(sentry.BootstrapInfra)
	err := c.cc.Invoke(ctx, BootstrapService_GetBootstrapInfra_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) PatchBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error) {
	out := new(sentry.BootstrapAgentTemplate)
	err := c.cc.Invoke(ctx, BootstrapService_PatchBootstrapAgentTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error) {
	out := new(sentry.BootstrapAgentTemplate)
	err := c.cc.Invoke(ctx, BootstrapService_GetBootstrapAgentTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetBootstrapAgentTemplates(ctx context.Context, in *v3.QueryOptions, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplateList, error) {
	out := new(sentry.BootstrapAgentTemplateList)
	err := c.cc.Invoke(ctx, BootstrapService_GetBootstrapAgentTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) RegisterBootstrapAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, BootstrapService_RegisterBootstrapAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetBootstrapAgentConfig(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, BootstrapService_GetBootstrapAgentConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) CreateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error) {
	out := new(sentry.BootstrapAgent)
	err := c.cc.Invoke(ctx, BootstrapService_CreateBootstrapAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error) {
	out := new(sentry.BootstrapAgent)
	err := c.cc.Invoke(ctx, BootstrapService_GetBootstrapAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) GetBootstrapAgents(ctx context.Context, in *GetBootstrapAgentsRequest, opts ...grpc.CallOption) (*sentry.BootstrapAgentList, error) {
	out := new(sentry.BootstrapAgentList)
	err := c.cc.Invoke(ctx, BootstrapService_GetBootstrapAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) DeleteBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*DeleteBootstrapAgentResponse, error) {
	out := new(DeleteBootstrapAgentResponse)
	err := c.cc.Invoke(ctx, BootstrapService_DeleteBootstrapAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) UpdateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error) {
	out := new(sentry.BootstrapAgent)
	err := c.cc.Invoke(ctx, BootstrapService_UpdateBootstrapAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapServiceServer is the server API for BootstrapService service.
// All implementations should embed UnimplementedBootstrapServiceServer
// for forward compatibility
type BootstrapServiceServer interface {
	PatchBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error)
	GetBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error)
	PatchBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplates(context.Context, *v3.QueryOptions) (*sentry.BootstrapAgentTemplateList, error)
	RegisterBootstrapAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	GetBootstrapAgentConfig(context.Context, *sentry.BootstrapAgent) (*v3.HttpBody, error)
	CreateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error)
	GetBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error)
	GetBootstrapAgents(context.Context, *GetBootstrapAgentsRequest) (*sentry.BootstrapAgentList, error)
	DeleteBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*DeleteBootstrapAgentResponse, error)
	UpdateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error)
}

// UnimplementedBootstrapServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBootstrapServiceServer struct {
}

func (UnimplementedBootstrapServiceServer) PatchBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBootstrapInfra not implemented")
}
func (UnimplementedBootstrapServiceServer) GetBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapInfra not implemented")
}
func (UnimplementedBootstrapServiceServer) PatchBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBootstrapAgentTemplate not implemented")
}
func (UnimplementedBootstrapServiceServer) GetBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgentTemplate not implemented")
}
func (UnimplementedBootstrapServiceServer) GetBootstrapAgentTemplates(context.Context, *v3.QueryOptions) (*sentry.BootstrapAgentTemplateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgentTemplates not implemented")
}
func (UnimplementedBootstrapServiceServer) RegisterBootstrapAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServiceServer) GetBootstrapAgentConfig(context.Context, *sentry.BootstrapAgent) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgentConfig not implemented")
}
func (UnimplementedBootstrapServiceServer) CreateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServiceServer) GetBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServiceServer) GetBootstrapAgents(context.Context, *GetBootstrapAgentsRequest) (*sentry.BootstrapAgentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgents not implemented")
}
func (UnimplementedBootstrapServiceServer) DeleteBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*DeleteBootstrapAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServiceServer) UpdateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBootstrapAgent not implemented")
}

// UnsafeBootstrapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServiceServer will
// result in compilation errors.
type UnsafeBootstrapServiceServer interface {
	mustEmbedUnimplementedBootstrapServiceServer()
}

func RegisterBootstrapServiceServer(s grpc.ServiceRegistrar, srv BootstrapServiceServer) {
	s.RegisterService(&BootstrapService_ServiceDesc, srv)
}

func _BootstrapService_PatchBootstrapInfra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapInfra)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).PatchBootstrapInfra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_PatchBootstrapInfra_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).PatchBootstrapInfra(ctx, req.(*sentry.BootstrapInfra))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetBootstrapInfra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapInfra)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetBootstrapInfra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetBootstrapInfra_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetBootstrapInfra(ctx, req.(*sentry.BootstrapInfra))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_PatchBootstrapAgentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgentTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).PatchBootstrapAgentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_PatchBootstrapAgentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).PatchBootstrapAgentTemplate(ctx, req.(*sentry.BootstrapAgentTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetBootstrapAgentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgentTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetBootstrapAgentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetBootstrapAgentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetBootstrapAgentTemplate(ctx, req.(*sentry.BootstrapAgentTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetBootstrapAgentTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.QueryOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetBootstrapAgentTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetBootstrapAgentTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetBootstrapAgentTemplates(ctx, req.(*v3.QueryOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_RegisterBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).RegisterBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_RegisterBootstrapAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).RegisterBootstrapAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetBootstrapAgentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetBootstrapAgentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetBootstrapAgentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetBootstrapAgentConfig(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_CreateBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).CreateBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_CreateBootstrapAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).CreateBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetBootstrapAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_GetBootstrapAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootstrapAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).GetBootstrapAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_GetBootstrapAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).GetBootstrapAgents(ctx, req.(*GetBootstrapAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_DeleteBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).DeleteBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_DeleteBootstrapAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).DeleteBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_UpdateBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).UpdateBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_UpdateBootstrapAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).UpdateBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

// BootstrapService_ServiceDesc is the grpc.ServiceDesc for BootstrapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootstrapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paralus.dev.sentry.rpc.BootstrapService",
	HandlerType: (*BootstrapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PatchBootstrapInfra",
			Handler:    _BootstrapService_PatchBootstrapInfra_Handler,
		},
		{
			MethodName: "GetBootstrapInfra",
			Handler:    _BootstrapService_GetBootstrapInfra_Handler,
		},
		{
			MethodName: "PatchBootstrapAgentTemplate",
			Handler:    _BootstrapService_PatchBootstrapAgentTemplate_Handler,
		},
		{
			MethodName: "GetBootstrapAgentTemplate",
			Handler:    _BootstrapService_GetBootstrapAgentTemplate_Handler,
		},
		{
			MethodName: "GetBootstrapAgentTemplates",
			Handler:    _BootstrapService_GetBootstrapAgentTemplates_Handler,
		},
		{
			MethodName: "RegisterBootstrapAgent",
			Handler:    _BootstrapService_RegisterBootstrapAgent_Handler,
		},
		{
			MethodName: "GetBootstrapAgentConfig",
			Handler:    _BootstrapService_GetBootstrapAgentConfig_Handler,
		},
		{
			MethodName: "CreateBootstrapAgent",
			Handler:    _BootstrapService_CreateBootstrapAgent_Handler,
		},
		{
			MethodName: "GetBootstrapAgent",
			Handler:    _BootstrapService_GetBootstrapAgent_Handler,
		},
		{
			MethodName: "GetBootstrapAgents",
			Handler:    _BootstrapService_GetBootstrapAgents_Handler,
		},
		{
			MethodName: "DeleteBootstrapAgent",
			Handler:    _BootstrapService_DeleteBootstrapAgent_Handler,
		},
		{
			MethodName: "UpdateBootstrapAgent",
			Handler:    _BootstrapService_UpdateBootstrapAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/sentry/bootstrap.proto",
}
