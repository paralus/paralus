// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rpc/sentry/kubeconfig.proto

package sentry

import (
	context "context"
	v3 "github.com/paralus/paralus/proto/types/commonpb/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeConfigService_GetForClusterWebSession_FullMethodName    = "/paralus.dev.sentry.rpc.KubeConfigService/GetForClusterWebSession"
	KubeConfigService_GetForClusterSystemSession_FullMethodName = "/paralus.dev.sentry.rpc.KubeConfigService/GetForClusterSystemSession"
	KubeConfigService_GetForUser_FullMethodName                 = "/paralus.dev.sentry.rpc.KubeConfigService/GetForUser"
	KubeConfigService_RevokeKubeconfig_FullMethodName           = "/paralus.dev.sentry.rpc.KubeConfigService/RevokeKubeconfig"
	KubeConfigService_GetOrganizationSetting_FullMethodName     = "/paralus.dev.sentry.rpc.KubeConfigService/GetOrganizationSetting"
	KubeConfigService_GetUserSetting_FullMethodName             = "/paralus.dev.sentry.rpc.KubeConfigService/GetUserSetting"
	KubeConfigService_GetSSOUserSetting_FullMethodName          = "/paralus.dev.sentry.rpc.KubeConfigService/GetSSOUserSetting"
	KubeConfigService_UpdateOrganizationSetting_FullMethodName  = "/paralus.dev.sentry.rpc.KubeConfigService/UpdateOrganizationSetting"
	KubeConfigService_UpdateUserSetting_FullMethodName          = "/paralus.dev.sentry.rpc.KubeConfigService/UpdateUserSetting"
	KubeConfigService_UpdateSSOUserSetting_FullMethodName       = "/paralus.dev.sentry.rpc.KubeConfigService/UpdateSSOUserSetting"
)

// KubeConfigServiceClient is the client API for KubeConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeConfigServiceClient interface {
	GetForClusterWebSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error)
	GetForClusterSystemSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error)
	GetForUser(ctx context.Context, in *GetForUserRequest, opts ...grpc.CallOption) (*v3.HttpBody, error)
	RevokeKubeconfig(ctx context.Context, in *RevokeKubeconfigRequest, opts ...grpc.CallOption) (*RevokeKubeconfigResponse, error)
	GetOrganizationSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error)
	GetUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error)
	GetSSOUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error)
	UpdateOrganizationSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error)
	UpdateUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error)
	UpdateSSOUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error)
}

type kubeConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeConfigServiceClient(cc grpc.ClientConnInterface) KubeConfigServiceClient {
	return &kubeConfigServiceClient{cc}
}

func (c *kubeConfigServiceClient) GetForClusterWebSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, KubeConfigService_GetForClusterWebSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) GetForClusterSystemSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, KubeConfigService_GetForClusterSystemSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) GetForUser(ctx context.Context, in *GetForUserRequest, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, KubeConfigService_GetForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) RevokeKubeconfig(ctx context.Context, in *RevokeKubeconfigRequest, opts ...grpc.CallOption) (*RevokeKubeconfigResponse, error) {
	out := new(RevokeKubeconfigResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_RevokeKubeconfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) GetOrganizationSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error) {
	out := new(GetKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_GetOrganizationSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) GetUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error) {
	out := new(GetKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_GetUserSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) GetSSOUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error) {
	out := new(GetKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_GetSSOUserSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) UpdateOrganizationSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error) {
	out := new(UpdateKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_UpdateOrganizationSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) UpdateUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error) {
	out := new(UpdateKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_UpdateUserSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigServiceClient) UpdateSSOUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error) {
	out := new(UpdateKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_UpdateSSOUserSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeConfigServiceServer is the server API for KubeConfigService service.
// All implementations should embed UnimplementedKubeConfigServiceServer
// for forward compatibility
type KubeConfigServiceServer interface {
	GetForClusterWebSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error)
	GetForClusterSystemSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error)
	GetForUser(context.Context, *GetForUserRequest) (*v3.HttpBody, error)
	RevokeKubeconfig(context.Context, *RevokeKubeconfigRequest) (*RevokeKubeconfigResponse, error)
	GetOrganizationSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error)
	GetUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error)
	GetSSOUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error)
	UpdateOrganizationSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error)
	UpdateUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error)
	UpdateSSOUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error)
}

// UnimplementedKubeConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKubeConfigServiceServer struct {
}

func (UnimplementedKubeConfigServiceServer) GetForClusterWebSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForClusterWebSession not implemented")
}
func (UnimplementedKubeConfigServiceServer) GetForClusterSystemSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForClusterSystemSession not implemented")
}
func (UnimplementedKubeConfigServiceServer) GetForUser(context.Context, *GetForUserRequest) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForUser not implemented")
}
func (UnimplementedKubeConfigServiceServer) RevokeKubeconfig(context.Context, *RevokeKubeconfigRequest) (*RevokeKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeKubeconfig not implemented")
}
func (UnimplementedKubeConfigServiceServer) GetOrganizationSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationSetting not implemented")
}
func (UnimplementedKubeConfigServiceServer) GetUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSetting not implemented")
}
func (UnimplementedKubeConfigServiceServer) GetSSOUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSOUserSetting not implemented")
}
func (UnimplementedKubeConfigServiceServer) UpdateOrganizationSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationSetting not implemented")
}
func (UnimplementedKubeConfigServiceServer) UpdateUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSetting not implemented")
}
func (UnimplementedKubeConfigServiceServer) UpdateSSOUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSOUserSetting not implemented")
}

// UnsafeKubeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeConfigServiceServer will
// result in compilation errors.
type UnsafeKubeConfigServiceServer interface {
	mustEmbedUnimplementedKubeConfigServiceServer()
}

func RegisterKubeConfigServiceServer(s grpc.ServiceRegistrar, srv KubeConfigServiceServer) {
	s.RegisterService(&KubeConfigService_ServiceDesc, srv)
}

func _KubeConfigService_GetForClusterWebSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetForClusterWebSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetForClusterWebSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetForClusterWebSession(ctx, req.(*GetForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_GetForClusterSystemSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetForClusterSystemSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetForClusterSystemSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetForClusterSystemSession(ctx, req.(*GetForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_GetForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetForUser(ctx, req.(*GetForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_RevokeKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).RevokeKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_RevokeKubeconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).RevokeKubeconfig(ctx, req.(*RevokeKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_GetOrganizationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetOrganizationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetOrganizationSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetOrganizationSetting(ctx, req.(*GetKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_GetUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetUserSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetUserSetting(ctx, req.(*GetKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_GetSSOUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetSSOUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetSSOUserSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetSSOUserSetting(ctx, req.(*GetKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_UpdateOrganizationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).UpdateOrganizationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_UpdateOrganizationSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).UpdateOrganizationSetting(ctx, req.(*UpdateKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_UpdateUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).UpdateUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_UpdateUserSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).UpdateUserSetting(ctx, req.(*UpdateKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfigService_UpdateSSOUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).UpdateSSOUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_UpdateSSOUserSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).UpdateSSOUserSetting(ctx, req.(*UpdateKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeConfigService_ServiceDesc is the grpc.ServiceDesc for KubeConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paralus.dev.sentry.rpc.KubeConfigService",
	HandlerType: (*KubeConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForClusterWebSession",
			Handler:    _KubeConfigService_GetForClusterWebSession_Handler,
		},
		{
			MethodName: "GetForClusterSystemSession",
			Handler:    _KubeConfigService_GetForClusterSystemSession_Handler,
		},
		{
			MethodName: "GetForUser",
			Handler:    _KubeConfigService_GetForUser_Handler,
		},
		{
			MethodName: "RevokeKubeconfig",
			Handler:    _KubeConfigService_RevokeKubeconfig_Handler,
		},
		{
			MethodName: "GetOrganizationSetting",
			Handler:    _KubeConfigService_GetOrganizationSetting_Handler,
		},
		{
			MethodName: "GetUserSetting",
			Handler:    _KubeConfigService_GetUserSetting_Handler,
		},
		{
			MethodName: "GetSSOUserSetting",
			Handler:    _KubeConfigService_GetSSOUserSetting_Handler,
		},
		{
			MethodName: "UpdateOrganizationSetting",
			Handler:    _KubeConfigService_UpdateOrganizationSetting_Handler,
		},
		{
			MethodName: "UpdateUserSetting",
			Handler:    _KubeConfigService_UpdateUserSetting_Handler,
		},
		{
			MethodName: "UpdateSSOUserSetting",
			Handler:    _KubeConfigService_UpdateSSOUserSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/sentry/kubeconfig.proto",
}
