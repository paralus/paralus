//protobuf for relay peering service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/rpc/sentry/relaypeer.proto

package sentry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerHelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relayuuid string `protobuf:"bytes,1,opt,name=relayuuid,proto3" json:"relayuuid,omitempty"` // the uuid of the relay
	Relayip   string `protobuf:"bytes,2,opt,name=relayip,proto3" json:"relayip,omitempty"`     // the ip address of the relay
}

func (x *PeerHelloRequest) Reset() {
	*x = PeerHelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerHelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHelloRequest) ProtoMessage() {}

func (x *PeerHelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHelloRequest.ProtoReflect.Descriptor instead.
func (*PeerHelloRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{0}
}

func (x *PeerHelloRequest) GetRelayuuid() string {
	if x != nil {
		return x.Relayuuid
	}
	return ""
}

func (x *PeerHelloRequest) GetRelayip() string {
	if x != nil {
		return x.Relayip
	}
	return ""
}

type PeerHelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serviceuuid string `protobuf:"bytes,1,opt,name=serviceuuid,proto3" json:"serviceuuid,omitempty"` // the uuid of the service
	Serviceip   string `protobuf:"bytes,2,opt,name=serviceip,proto3" json:"serviceip,omitempty"`     // the ip address of the relay
}

func (x *PeerHelloResponse) Reset() {
	*x = PeerHelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerHelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHelloResponse) ProtoMessage() {}

func (x *PeerHelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHelloResponse.ProtoReflect.Descriptor instead.
func (*PeerHelloResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{1}
}

func (x *PeerHelloResponse) GetServiceuuid() string {
	if x != nil {
		return x.Serviceuuid
	}
	return ""
}

func (x *PeerHelloResponse) GetServiceip() string {
	if x != nil {
		return x.Serviceip
	}
	return ""
}

// Probe Request from relay to peering service
type PeerProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relayuuid  string `protobuf:"bytes,1,opt,name=relayuuid,proto3" json:"relayuuid,omitempty"`
	Clustersni string `protobuf:"bytes,2,opt,name=clustersni,proto3" json:"clustersni,omitempty"`
}

func (x *PeerProbeRequest) Reset() {
	*x = PeerProbeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerProbeRequest) ProtoMessage() {}

func (x *PeerProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerProbeRequest.ProtoReflect.Descriptor instead.
func (*PeerProbeRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{2}
}

func (x *PeerProbeRequest) GetRelayuuid() string {
	if x != nil {
		return x.Relayuuid
	}
	return ""
}

func (x *PeerProbeRequest) GetClustersni() string {
	if x != nil {
		return x.Clustersni
	}
	return ""
}

type RelayClusterConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relayuuid string `protobuf:"bytes,1,opt,name=relayuuid,proto3" json:"relayuuid,omitempty"` // the uuid of the relay
	Relayip   string `protobuf:"bytes,2,opt,name=relayip,proto3" json:"relayip,omitempty"`     // the ip address of the relay
}

func (x *RelayClusterConnectionInfo) Reset() {
	*x = RelayClusterConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayClusterConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayClusterConnectionInfo) ProtoMessage() {}

func (x *RelayClusterConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayClusterConnectionInfo.ProtoReflect.Descriptor instead.
func (*RelayClusterConnectionInfo) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{3}
}

func (x *RelayClusterConnectionInfo) GetRelayuuid() string {
	if x != nil {
		return x.Relayuuid
	}
	return ""
}

func (x *RelayClusterConnectionInfo) GetRelayip() string {
	if x != nil {
		return x.Relayip
	}
	return ""
}

// Probe Response from service to relay
type PeerProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clustersni string                        `protobuf:"bytes,1,opt,name=clustersni,proto3" json:"clustersni,omitempty"`
	Items      []*RelayClusterConnectionInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PeerProbeResponse) Reset() {
	*x = PeerProbeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerProbeResponse) ProtoMessage() {}

func (x *PeerProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerProbeResponse.ProtoReflect.Descriptor instead.
func (*PeerProbeResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{4}
}

func (x *PeerProbeResponse) GetClustersni() string {
	if x != nil {
		return x.Clustersni
	}
	return ""
}

func (x *PeerProbeResponse) GetItems() []*RelayClusterConnectionInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

// Survey request sent from the service to all relays
type PeerSurveyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clustersni string `protobuf:"bytes,1,opt,name=clustersni,proto3" json:"clustersni,omitempty"`
}

func (x *PeerSurveyRequest) Reset() {
	*x = PeerSurveyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerSurveyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSurveyRequest) ProtoMessage() {}

func (x *PeerSurveyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSurveyRequest.ProtoReflect.Descriptor instead.
func (*PeerSurveyRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{5}
}

func (x *PeerSurveyRequest) GetClustersni() string {
	if x != nil {
		return x.Clustersni
	}
	return ""
}

// Survey response from relay to service
type PeerSurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relayuuid  string `protobuf:"bytes,1,opt,name=relayuuid,proto3" json:"relayuuid,omitempty"` // the uuid of the relay
	Relayip    string `protobuf:"bytes,2,opt,name=relayip,proto3" json:"relayip,omitempty"`     // the ip address of the relay
	Clustersni string `protobuf:"bytes,3,opt,name=clustersni,proto3" json:"clustersni,omitempty"`
}

func (x *PeerSurveyResponse) Reset() {
	*x = PeerSurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSurveyResponse) ProtoMessage() {}

func (x *PeerSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_sentry_relaypeer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSurveyResponse.ProtoReflect.Descriptor instead.
func (*PeerSurveyResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP(), []int{6}
}

func (x *PeerSurveyResponse) GetRelayuuid() string {
	if x != nil {
		return x.Relayuuid
	}
	return ""
}

func (x *PeerSurveyResponse) GetRelayip() string {
	if x != nil {
		return x.Relayip
	}
	return ""
}

func (x *PeerSurveyResponse) GetClustersni() string {
	if x != nil {
		return x.Clustersni
	}
	return ""
}

var File_proto_rpc_sentry_relaypeer_proto protoreflect.FileDescriptor

var file_proto_rpc_sentry_relaypeer_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x22, 0x4a, 0x0a, 0x10, 0x50, 0x65,
	0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x69, 0x70, 0x22, 0x53, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x69, 0x70, 0x22, 0x50, 0x0a, 0x10, 0x50,
	0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x6e, 0x69, 0x22, 0x54, 0x0a,
	0x1a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x69, 0x70, 0x22, 0x7d, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x6e, 0x69, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x33, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x6e, 0x69, 0x22, 0x6c, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x6e, 0x69, 0x32, 0xe5, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x50, 0x43, 0x12,
	0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x11, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x50, 0x43, 0x12,
	0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x50, 0x43,
	0x12, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x29, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0xd5, 0x01,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x70, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x75, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0xa2, 0x02, 0x04, 0x50, 0x44,
	0x53, 0x52, 0xaa, 0x02, 0x16, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x16, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x22, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x75, 0x73, 0x5c, 0x44,
	0x65, 0x76, 0x5c, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5c, 0x52, 0x70, 0x63, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x75, 0x73, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_rpc_sentry_relaypeer_proto_rawDescOnce sync.Once
	file_proto_rpc_sentry_relaypeer_proto_rawDescData = file_proto_rpc_sentry_relaypeer_proto_rawDesc
)

func file_proto_rpc_sentry_relaypeer_proto_rawDescGZIP() []byte {
	file_proto_rpc_sentry_relaypeer_proto_rawDescOnce.Do(func() {
		file_proto_rpc_sentry_relaypeer_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rpc_sentry_relaypeer_proto_rawDescData)
	})
	return file_proto_rpc_sentry_relaypeer_proto_rawDescData
}

var file_proto_rpc_sentry_relaypeer_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_rpc_sentry_relaypeer_proto_goTypes = []interface{}{
	(*PeerHelloRequest)(nil),           // 0: paralus.dev.sentry.rpc.PeerHelloRequest
	(*PeerHelloResponse)(nil),          // 1: paralus.dev.sentry.rpc.PeerHelloResponse
	(*PeerProbeRequest)(nil),           // 2: paralus.dev.sentry.rpc.PeerProbeRequest
	(*RelayClusterConnectionInfo)(nil), // 3: paralus.dev.sentry.rpc.RelayClusterConnectionInfo
	(*PeerProbeResponse)(nil),          // 4: paralus.dev.sentry.rpc.PeerProbeResponse
	(*PeerSurveyRequest)(nil),          // 5: paralus.dev.sentry.rpc.PeerSurveyRequest
	(*PeerSurveyResponse)(nil),         // 6: paralus.dev.sentry.rpc.PeerSurveyResponse
}
var file_proto_rpc_sentry_relaypeer_proto_depIdxs = []int32{
	3, // 0: paralus.dev.sentry.rpc.PeerProbeResponse.items:type_name -> paralus.dev.sentry.rpc.RelayClusterConnectionInfo
	0, // 1: paralus.dev.sentry.rpc.RelayPeerService.RelayPeerHelloRPC:input_type -> paralus.dev.sentry.rpc.PeerHelloRequest
	2, // 2: paralus.dev.sentry.rpc.RelayPeerService.RelayPeerProbeRPC:input_type -> paralus.dev.sentry.rpc.PeerProbeRequest
	6, // 3: paralus.dev.sentry.rpc.RelayPeerService.RelayPeerSurveyRPC:input_type -> paralus.dev.sentry.rpc.PeerSurveyResponse
	1, // 4: paralus.dev.sentry.rpc.RelayPeerService.RelayPeerHelloRPC:output_type -> paralus.dev.sentry.rpc.PeerHelloResponse
	4, // 5: paralus.dev.sentry.rpc.RelayPeerService.RelayPeerProbeRPC:output_type -> paralus.dev.sentry.rpc.PeerProbeResponse
	5, // 6: paralus.dev.sentry.rpc.RelayPeerService.RelayPeerSurveyRPC:output_type -> paralus.dev.sentry.rpc.PeerSurveyRequest
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_rpc_sentry_relaypeer_proto_init() }
func file_proto_rpc_sentry_relaypeer_proto_init() {
	if File_proto_rpc_sentry_relaypeer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerHelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerHelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerProbeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayClusterConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerProbeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerSurveyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_sentry_relaypeer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerSurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rpc_sentry_relaypeer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_rpc_sentry_relaypeer_proto_goTypes,
		DependencyIndexes: file_proto_rpc_sentry_relaypeer_proto_depIdxs,
		MessageInfos:      file_proto_rpc_sentry_relaypeer_proto_msgTypes,
	}.Build()
	File_proto_rpc_sentry_relaypeer_proto = out.File
	file_proto_rpc_sentry_relaypeer_proto_rawDesc = nil
	file_proto_rpc_sentry_relaypeer_proto_goTypes = nil
	file_proto_rpc_sentry_relaypeer_proto_depIdxs = nil
}
